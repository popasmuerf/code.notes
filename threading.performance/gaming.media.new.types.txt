//https://www.youtube.com/watch?v=qk5F6Bxqhr4
Image stuff to know.....
======================================
PNG is recommened format for Java 8 games
or any game written in any platform.  PNG
is a professional image image-compositing formate, and your games will
essentially be a real-time sprite-compsitn engine, so you will need to use PNG32 imagery
PNG's compression algorithm is loseless.

NOTE:
=======================================
GIF : only supports indexed color to obtain compression...though at the cost of efficiency
JPEG : is the most popular but it leaves compression artifacts that are products of it's lossy compression algorithm

PNG truecolor versions:
=====================================
PNG24 : cannot be used in image compositing
PNG32 : which carries an alpha channel used to define transparency.




Digital Image Resolution and Aspect Ratio: Defining Image Size and Shape
=========================================================================
* 2D(two-dimensional) arrays of pixels("pixel" stands for picture[pix] element[el]).
* Sharpness of impage is known as "resolution"
* Resolution = image_pixels_per_width * image_pixels_per_height ( x-axis * y-axis)
* The more pixels an image has....the more resolution it possesses
* To find the total number of image pixels, multiply the width pixels by the height pixels

Example: derive the number of pixels in a (VGA) 800 x 480 image:

	total_number_pixels = w * h
	total_number_pixels = 800 * 480
	total_number_pixels = 384,000

Aspect ratio
====================================================================
The aspect ratio is defines the square(or rectangle as it may be) that any image
may occupy.
A 1:1 aspect ratio display (or image) is always perfectly square, as is a :
	2:2
	-or-
	3:3
	-or-
	N:N
ratios.  
Ratios of 2:1 (widescreen) aspect ratio, such as 2,160 * 1,080 resolution, are now available.

aspect_ratio =  width:height


Digital Image Color Theory and Color Depth: Defining Precise Image Pixel Colors
===============================================================================
*  The color values for each digital image pixel can be defined by the amount of three
   differnt colors of red, green, and blue (RGB), which is present in some amount in every
   pixel

* There are 256 levels of brightness for each read, green, and blue color value within each pixel (8-bit)
* each pixel has a 8 bits of value-controlling color brightness variation
* Pixel 8 bit range ---> 0(#00 white) --> 255(#FF black)
*  The number of bits that are used to represent digital image pixel color is referred to as the color depth of the image
* Common color depths used in the dital imaging industry include:
	8 bit
	16 bit
	24 bit
	32 bit

Alpha channel transparency
=================================================================================
To accomplish alpha channel transparency value, which we can use
to control the precision of the blending amount of a given pixel
with another pixel(in the same (x,y) posistion ) on other layers
(above or below it).

Like other RGB channels, an alpha channel has 256 transparency levels.
In Java programming, the alpha channel is represented by the first
two slots in a hexadecimal representation of #AARRGGBB data values.

Alpha channel ARGB data values use eight slots(32 bit) of data instead of
the six data slots(#RRGGBB) used in a 24-bit image, which is really
a 32-bit image with zero alpha channel data therefore....we will not be using PNG24
as it has no alpha channel we need for compositing, unless it is the bottom
image plate in a compositing layer stack....only PNG32 images will be used for top
plate in a compositing layer stack.

We can accomplish image compositing(called blending modes) using JavaFX's Blend
class found in :
	
	javafx.scene.effect
		|
		|
		|-----------Blend

Blend constants in class javafx.scene.effect.Blend:

	ADD
	SCREEN
	OVERLAY
	DARKEN
	LIGHTEN
	MULTIPLY
	DIFFERENCE
	EXCLUSION
	SRC_ATOP
	SRC_OVER
	SOFT_LIGHT

In Java and thus JavaFX different levels of ARGB color intensity values are represented
using hex notation(Base 16) which unlike Base10 which has a range of 0-9,
Hex Base16 uses a range 0 to F.   Hex values in Java start always with a "0" for example:

	White with no Alpha Channel: 0xFFFFFF  (in this case a 24-bit value)

Each of the six slots in thi s24-bit hex representation stands for a single Base16 value,
so to get the 256 values required for each RGB clor will take two slots,
as 16 x 16 = 256.....so therefore in order to represent a 24 bit image using hex
notation, you will need to have six slots after teh pound sign to hold each of the six hex data
values.

16^6 = 16,777,216 possible colors for a 24-bit true-color image data.
The hexidecimal data slots repreent RGB values in the following format:

	0xRRGGBB

Two for Red, tow for green, two for Blue.

White 32-bit with no Alpha-C(24 bit):
0xFFFFFF

Yellow 32-bit with no Alpha-C(24 bit):
0xFFFF00






