https://www.tutorialspoint.com/servlets/servlets-form-data.htm
http://www.servlets.com/javadoc/javax/servlet/http/HttpServletRequest.html
web.xml
===========================================
All JEE compliant containers, frameworks, etc...
have you configure a web.xml file(or is intially auto-configured
...the point is...it's part of the spec.)

web.xml is used for web app resource mapping.
For instance...we declar our app servlets and their
URL mappings in web.xml.


Example of web.xml mapping for the following code below:
=====================================================
<servlet>
        <servlet-name>HelloWorld</servlet-name>
        <servlet-class>HelloWorld<servlet-class>
</servlet>

<servlet-mapping>
        <servlet-name>
        HelloWorld        
        </servlet-name>
        <url-pattern>
        /HelloWorld
        <url-pattern>
<servlet-mapping>


Servlets - Form Data
=====================================================
You must have come across many situations when you need
to pass some information from your browser to web server
and ultimately toyour backend program.  The browser uses
two methods to pass this information to web server
andultimatelyu t your backend program.  The browser
uses two methods to pass this information to the web
server.  Thee methods are GET Method and POST method









A servlet life cycle can be defined as a the entire process from its
creation  till it's destruction.   The following
are the paths followed by a servlet.

        *       The servelt is initialized by calling the method:
                        -       init()
        *       The sevelt calls the method for processing
                client requests0:
                -       service()
        *       The servlet is terminated by calling the method:
                -       destroy()

        *       After destroy() is called the servlet is
                garbage collected by the jvm   


Servlet Method init():
==============================================================
    *   init() may be called only once per servlet initialization
    *   Servlets are normaly spawned when a user first invokes
        a URL corresponding to the servlet, but yuc an also
        specify that the servlet be loaded when the sever is 
        first started.
    *   Servlets are singletons.  Multiple client requests
        take the form of threads that communicate with the
        Servlet instance
    *   Code example :

        public void init() throws ServletException{
                //initialization code
        }


Servlet Method service():
==============================================================
    *   service() is the main method to perform the actual task.
        The servlet container(i.e. web server) calls the service()
        method to handle requsts coming from the client and write
        the formatted response back to the client
    *   service() invokes the following when called:
                -       doPost()
                -       doGet()
                -       doPut()
                -       doDelete()
        as appropiate when called by the container.
    *   It is not recommended that you override service()
        in lieue of overriding the doPost(),doGet(),doPut(), doDelete()
        methods called via service()
    *   Code example :

        public void service(ServletRequest request, ServletResponse response) throws ServletException,IOException{
              //do stuff  
        }

doGet():
==============================================================
    *   doGet() is invoked by service() to handle 
        normal HTTP requests for URLs or from HTML
        that have no method specifed(GET should be the default HTTP mehtod)
    *   Code example :

        public void doGet(HttpServletRequest request, HttpServletResponse response) 
        throws ServletException,IOException{
              //do stuff  
        }

doPost():
==============================================================
    *   doGet() is invoked by service() to handle 
        normal HTTP requests for URLs or from HTML
        that specifically indicate a POST request
        (GET should be the default HTTP mehtod)
    *   Code example :

        public void doPost(HttpServletRequest request, HttpServletResponse response) 
        throws ServletException,IOException{
              //do stuff  
        }

destroy()
==============================================================
The destroy() method is called only once at the end of the life cycle of
a servlet  This method allows for a specified module dedicated to 
accounting such as:
        *       closing DB connections
        *       halting/killing threads
        *       finalizing and writing cookie lists/hit counts
        *       other duties related to resource reclimation

         public void destroy(){
              //do stuff  
        }



Example Servlet code
===============================================================
import java.io.*;
import javax.servlet.* ;
import javax.servlet.http.*;

//Extend HttpServlet class

public class HelloWorld extends HttpServlet{
        private String message = null ;
        public void init(){
                message = "Hello World";
        }
        public void doGet(HttpServletRequest request,
                          HttpServletResponse response)
                          throws IOException{
                response.setContent("text/html");
                PrintWriter out = response.getWriter();
                out.println("<h1>" + message + "</h1>");
        }
        public void destroy(){
                //close out stuff
        }
}

        
Servlets - Form Data
=====================================================
You must have come across many situations when you need
to pass some information from your browser to web server
and ultimately to your backend program. The browser uses
two methods to pass this information to web server. 
These methods are GET Method and POST Method.


GET method
-----------------------------------------------------
The GET method sends the encoded user information
appended to the page request.  The page and the
encoded information are separated by teh ? charachter
as follows:

        http://www.test.com/hell?key1=val1&key2=val2

client query strings are passed using the QUERY_STRING
header and will be accessble through QUERYU_STRING
enviroment variable and Servlet handles this thype
of rquests using doGet()


NOTE: abot GET and passwords
---------------------------------------------------------
Never use GET for passwords or other sensitive 
data.  GET has a size limitation of only 1024
characters that may be allocated for request strings




POST method:
----------------------------------------------------------
POST is a more reliable method of passing informatin to
a backend program is the POST method.  This 
packages the ifnormation in exactly the
same way as GET methods, but instead of 
sending it as a text string after "?"


GET method Example Using URL
=====================================================

Here is a simple URL which will pass two values to
HelloForm program using GET method.

http://localhost:8080/HelloForm?firt_name=ZARA&last_name=ALI

Below is the HelloForm.java servlet program to handle
input given by a web browser.  We are going
to use the method :

        getParameter()

which makes it very easy to access passed information


/****************Code***************/
import java.io.* ;
import javax.servlet.* ;
import javax.servlet.http.* ;

public class HelloForm extends HttpServlet{
        public void doGet(HttpServletRequest request,
                          HttpServletResponse response)
        throws IOException, ServletException
                response.setContentType("text/html")
                PrintWriter out = response.getWriter();
                String title = "Using GET Method to Read Form Data";
                String docType ="<!doctype html public \"-//w3c//dtd html 4.0 " +
              "transitional//en\">\n"; 
                out.print(docType + "<html>\n" +
                "<head><title>" + title + "</title></head>\n" +
                "<body bgcolor=\"#f0f0f0\">\n" +
                "<h1 align=\"center\">" + title + "</h1>\n" +
                "<ul>\n" +
                "  <li><b>First Name</b>: "
                + request.getParameter("first_name") + "\n" +
                "  <li><b>Last Name</b>: "
                + request.getParameter("last_name") + "\n" +
                "</ul>\n" +
                "</body></html>"); )
        }
}







