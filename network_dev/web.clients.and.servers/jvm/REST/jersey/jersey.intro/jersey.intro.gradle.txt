https://github.com/jasonray/jersey-starterkit/wiki/Create-a-%22Hello-World%22-jersey-project
https://dragonflytechblog.wordpress.com/2015/05/20/restful-services-using-jersey-jetty-and-gradle/




Step 1:  Specify dependencies
================================
//Our gradle file
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse' //if we are using eclipse...let's pray not
apply plugin: 'jetty' //if we are using the jetty embedded servlet container

repositories{
	mavenCentral() //we are getting are stuff from maven
}

dependencies {
    compile "javax.ws.rs:jsr311-api:1.1.1"
    compile 'com.sun.jersey:jersey-server:1.13'
    compile 'com.sun.jersey:jersey-core:1.13'
    compile 'com.sun.jersey:jersey-servlet:1.13'
    testCompile "junit:junit-dep:4.10"
}


Step 2: create resource classes
==============================================
The resource class is your actual endpoint for you webservice.
I fyou are following a REST/Resource Orientec Archtiectrue(ROA) approach, this is likely a "thing"/noun  in  your system, such as customer, order, etc/
I typically  name this something like "CustomerResource" with methods 
like "getCustomers" or "getCustomer" or "updateCustomer"

/** createing a resource class **/
import javax.ws.rs.Path ;
@Path("/hello")
public class HelloWorldResource{
	@GET
	@Produces(MediaType.TEXT_PLAN)
	public String sayHello(){
		return "hello";
	}
}

Step 2: Configure jersey servlet
==============================================
Jersey works by using a servlet to capure calls to a URL, and routing to
the correct methods based on the path, media type, and method.

To configure to which URL's the servlet will listen, we need to add a servlet
secton to the web.xml file

<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://java.sun.com/xml/ns/javaee" 
xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5">

<servlet>
	<servlet-name>Jersey</servlet-name>
	<servlet-class>com.sun.jersey.spi.container.servlet.ServletContainer</servlet-class>
	<load-on-startup>1</load-on-startup>
	<init-param>
		<param-name>com.sun.jersery.config.property.packages</param-name>
		<param-value>com.thirdplanet.rescr</param-value>
	</init-param>
	<servlet-mapping>
		<servlet-name>Jersey</servlet-name>
		
	</servlet-mapping>
</servlet>

</web-app>




A sing page Java/Jetty/Jersey REST app with no web.xml descriptor
https://newfivefour.com/single-page-no-web-xml-jersey-jetty-java-rest.html
=======================================================================
=======================================================================
***********************************************************************
=======================================================================
=======================================================================

build file (gradle)
--------------------------------------------------------------------
/**
	The build Gradle File
*/
apply plugin:'war'
apply plugin:'eclipse' //cause..sigh...eclipse....

repositories{
	mavenCentral() 
}
dependencies{
	compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.16'
	compile 'org.glassfish.jersey.bundles:jaxrs-ri:2.16'
}
compileJava{
	sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

the app/resource module --> src/main/javas/com/example/App.java
--------------------------------------------------------------------
package com.example
import java.util.List ;
import java.util.ArrayList ;

import javax.ws.rs.Application

