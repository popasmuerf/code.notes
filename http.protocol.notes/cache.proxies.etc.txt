HTTP reverse Proxie
===============================
Are public facing and may be used for
load balancing web apps behind them




HTTP forward proxy
===============================
Are used in intra-nets where they
often serve as pain in the asses
for their users via blocking sites
like imgur that help maintain your sanity.




Public cache
===============================
Cache that is shared among multiple uses
Public cache usually resided on proxy servers.
Cache on a forward proxy usually caching popular resources
commonly used by users....for example...at NPS....
Amazon.com and Netflix are probably in the 
forward proxy cache.



Private cache
==================================
Private cache are for single uses.
The private cache may be more familiar to people
as  Internet Explorer's "Temporary Internet Fies",
or users of Google Chrome as the "about:cache"  "url".


Cache Rules(lolz....I see what I did there..)
==================================================
	* 200 (OK) server responses to GET requests are by default cached
	  in HTTP 1.1 (meaning that proxies and clients may cache in response)	
	* Applications may influence this default caching via the header
		Cache-Control
			-or-
		Expires
	* The Expires header is deprecated but still widely used.
	* The header:
		Pragma 
	  is also used to control caching behavior, but like Expires...it is only still
	  used for backwards compatibility reasons.

HTTP response values for Cache-Control
===================================================
	*	public
	*	private
	*	no-cache

	*	A value of public means public proxy servers can cache the response.
	*	A value of private means only the user's browser can cache the response.
	*	A Value of no-cache means on one should cache the response.
	*	A Value of no-store means the message might contain sensitive information and not only should the 
		message not be cached, orsaved, but the browser should remove the message from memory
		as son as possible

Example of a partial response from Flickr.com for one of the Flickr CSS files
==============================================================================
HTTP/1.1 200 OK
Last-Modified: Wed 25 Jan 2012 17:55:15 GMT
Expires:Sat, 22 Jan 2022 17:55:15 GMT
Cache-Control: max-age=315360000, public


^^^
	*	The Cache-Control value is an aggressive caching strategy
	*	The Cache-Control value of public denotes that forward proxies should cache these resources
	*	The Last-Modified value can serve as a validation value 
	*	If a client is HTTP 1.1 compliant and unserstand Cache-Control, the client shoulduse the value in 
		max-age instead of the value of Expires


Example of a GET request where we need to check up on a resource before downloading it
==============================================================================================
-request-
GET .... HTTP/1.1
If-Modified-Since: Wed, 25 Jan 2012 17:55:15 GMT

-response-
HTTP/1.1 304 Not Modified
Expires:Sat, 22 Jan 2022 17:16:19 GMT
Cache-Control: max-age=315360000,public



^^^
	*	The If-Modified-Since header is telling the server the client only needs
		the full response if the resource has changed.  If the resource hasn't changed, the server
		can  respond with a 304(not modified) message:
	*	The server here is telling the client that nothing has been modified...so use what you already
		have that has not been cached.
	*	The Last-Modified value can serve as a validation value 
	*	If a client is HTTP 1.1 compliant and unserstand Cache-Control, the client shoulduse the value in 
		max-age instead of the value of Expires

Using the ETag as a validator
----------------------------------------------------------------------
-response-
HTTP/1.1 304 Not Modified
Expires:Sat, 22 Jan 2022 17:16:19 GMT
ETag:"8e5bcd-59f-4b5dfef1-4d00"
Content-Type:text/xml
Vary:Accept-Encoding
Content-Encoding:gzip
Content-Length:437


^^^^	
	*	The ETag is an opaque identifier, meaning the ETag does not hae any inherit
		meaning.
	*	ETags may take the form of a timestampe, a GUID, or a value computed by running
		hashing algorithms against a resource.
	*	The client knows if a resource has changed via the server issuing a new ETag
	*	If the ETag in the next response is the same as the previous...then the client knows that
		the resource has not changed and thus should use the resources from the previous response
		that has been cached.


Summary
==========================================================================
	*	The ability to layer caching and other services between a server and a client
		has been the drivng force behind the success of HTTP and the web
	*	The visibility of the self-describing HTTP messages and indirection provided by URLs
		make the "magic" of the web possible.





