http://docs.grails.org/latest/guide/theWebLayer.html#gsp

Groovy Server Pages
===========================================================
Groovy Server Pages (or GSP for short) is Grails view 
technology.  It is designed to be familiar to users of technology
like ASP and JSP but to be far more flexible and intuitive.

GSPs live in teh grails-app/views directory and are typically rendered
by convention or via the method:

	render(view:"index")

		-or-
	render([view:"index"])


A GSP is typically a mix of mark-up and GSP tags which aid in view 
rendering.




GSPs typically have a "model"
==========================================================
A model in this context is a set of variables
that are used for view rendering.  The model
is passed to the GSP view from a controller

                             --------
-------------------------    | model |     -----
Controller              |----------------->|view|
-------------------------                  -----

A GSP typically  has a "model" which is a set of variables
that  are used for view rendering.  The model is passed to
GSP view from a controller.  For example consider the
following controller action:

class Controller{
	show(){
		[book: Book.get(params.id) ]
	}
}


//is the same thing as :

class Controller{
	show(){
		def  bookMap = [book:Book.get(params.id)]
		return(bookMap)
	}
}


^^^ The above action will look up a Book instance and then
create a model that contains a key called book.
This key can then be referenced within the GSP view using
the name book:

${book.title}
${book.author}
${book.cbn}




GSP basics
=========================================================
In the next view sections we'll go thryough the basics of 
GSP and what is available to us.


GSP supports the JSP usage <% %> scriptlet blocks to embed Groovy code
(this is discouraged...)
===============================================================

<html>
	<body>
		<% out << "Hello GSP!" %>
	</body>
</html>

  <!---------or---------->	

<html>
	<body>
		<%="Hello GSP!" %>
	</body>
</html>

 <!---------or---------->

<html>
	<body>
		<%-- This is my comment --%>
		<%="Hello GSP!" %>
	</body>
</html>


Note: Embedding data recieved from the user
==========================================
Embedding data recieved from user input has the risk of
making your application vulnerable to a XSS 
attack.


Variables and Scopes
=======================================================
Within the <% %> brackets you can declare variables:

<html>
	<body>
		<%---This is my comment---%>
 		<% now = Date() %>
		<%=now%> 
	</body>
</html>



GSP also supports JSP-style server-side comments
(which are not rendered in the HTML response)



Within the scope of a GSP there are a number of
pre-defined variables, including:
================================================
http://www.larp.com/legioxx/pugio.html
	*	application - The javax.servletContext instance
	*	applicationContext - The Spring application context
	*	flash	- The flash object
	*	grailsApplication - The GrailsApplication instance
	*	out - The response writer for writing to the output stream
	*	params - The params object for retrieving request parameters
	*	request - The HttpServletRequest instance
	*	response - The HttpServletResponse instance
	*	webRequest - The GrailsWebRequest instance


Logic and Iteration
================================================
Using the JSP <% %> syntax you can embed loops
and so on using this syntax:S


<!-- iteration example -->
<html>
   <body>
      <% [1,2,3,4].each { num -> %>
         <p><%="Hello ${num}!" %></p>
      <%}%>
   </body>
</html>


<!-- branching example -->
<html>
   <body>
      <% if(params.hello == 'true') %>
      <%="Hello!" %>
      <%else%>
      <%=GoodBye%>
   </body>
</html>



Page Directives
================================================
Sometimes we need to import "directives"...
things like libs from some api....though it is rarely
needed in Groovy as a lot of stuff is imported by
default and do to Groovy's GSP


<!-- import java's swing framework -->
<html>
   <body>
      <%@ page import="java.swing.*" %>
      <% ...............%>
      <%................%>
   </body>
</html>


<!-- specifying a page content type -->
<html>
   <body>
      <%@ contentType="application/json*" %>
      <% ...............%>
      <%................%>
   </body>
</html>

GSP --> ${expr}
================================================
Is equivalent to JSP's EL tag : <%= %>
...but unlike JSP EL, we can have any groovy expression
with the confines  of  ${...}

<html>
	<body>
		Hello ${params.name}
	</body>
</html>



<!-- branching example -->
<html>
   <body>
      <% if(params.hello == 'true') %>
      <%="Hello!" %>
      <%else%>
      <%=GoodBye%>
      
   </body>
</html>

GSP Tags
=================================================
Now that the less attractive JSP heritage has been set
aside, let's look at what our GSPs can do.....


All built-in GSP tags start with the prefix:

	g:

Unlike JSP, you don't specify any tag library imports
If a tag starts with g: it is automatically assumed to be
a GSP tag


GSP tags can have bodies:
==================================================
<g:example>
	Hello World
</g:example>




Expressions can be passed into GSP tag attributes, if an expression
is not used it will be a  String
---------------------------------------------------------------------------
<g:example "${new Date()"}>
	Hello World
</g:example>

Maps can also be passed into GSP tag attributes wich are often used
for a named parameter style syntax
-----------------------------------------------------------------------
<g:example attr="${new Date()}" attr2="[one:1,two:2,three:3]"
	Hello world
</g:example>


Variables and Scopes
========================================================
Variables can be defined within a GSP using the tag:

	set
Example
---------------------------------------------------------
<g:set var="myHTML">
	Some re-usable code on  ${new Date()}
</g:set>


The assigned value can also be a bean from the applicationContext
-----------------------------------------------------------------
<g:set var="bookService" bean="bookService"/>

GSP variables can also be placed in one of the following scopes:
----------------------------------------------------------------
	*	page - Scope to the current page
	*	request - Scoped to the current request
	*	flash - Placed within the flash scope
			and thus available to the next request
	*	session - Scoped for the user session
	*	application - Application-wide scope

Let's specify a scope for our lovely variable.....
----------------------------------------------------------------

<g:set var="now" value="${new Date()}" scope="request">

<g:set var="sessionId" value=session.getId() scope="session">



GSP Logic and Iteration
================================================================
GSP supports logical and iterative tags out ofthe box.

<g:if test="$session.role == 'admin'}">
	<%--show admin functions --%>
</g:if>
<g:else>
	<%--show basic functions --%>
</g:else>

<g:each in="${books}" expr="it.author == 'Stephen King'">
	<p>Title: ${it.title}</p>
</g:if>
<g:else>
	<%--show basic functions --%>
</g:else>


<g: set var ="num" value="${0}"/>
	<g: while test="${num < 5 }">
		<p>Number ${number++}</p>
	</g:while>
</g:>


Search and Filtering
=============================================================
<g:findAll in="${books}" expr="it.author == 'Stephen King'">
	<p>Title: ${it.title}</p>
</g:findAll>

<g:grep in="${books}" filter=~/.*?Groovy.*?/">
	<p>Title: ${it}</p>
</g:grep>




