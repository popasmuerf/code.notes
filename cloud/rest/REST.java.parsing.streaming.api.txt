Parsing JSON Streaming 
==========================================================

Steps
------------------------------------
1. Build object model

The choice of the builder class depends on
whether you want to generate a JSON
object or a JSON array:

        *       javax.json.JsonObjectBuilder
                -----------------------------
                This builder class is used for
                generating the JSON object model
                from scratch.  This class provides
                methods to add the name-value pairs
                to the object model and to 
                return the final object

        *       javax.json.JsonArrayBuilder
                -----------------------------
                This builder class is used for
                generating an array of the JSON
                objects from scratch.  This class
                provides methods to add objects
                or values to the array model and 
                to return the final array.

The builder class can be created either from the classes
of:

        javax.json.Json
                -or-
        javax.json.JsonBuilderFactgory

You may select javax.json.JsonBuilderFactory if you
want to overrided the default configurations for the
generated objects or if you need to create multiple
instances of the builder classes



Example 
======================================
import javax.json.Json;
import javax.json.JsonArray;
import javax.json.JsonArrayBuilder;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.json.JsonWriter;
import java.io.FileOutputStream;
import java.io.OutputStream ;

//Build JsonArray
JsonArrayBuilder jsonArrayBuilder = Json.createArrayBuilder();
//Get a list of Employee instances
//Not interested in the implementation details
//of this list in this example
List<Employee>employees = getEmployeeList();
//interate over the employee list and
//create the JsonObject for each item
for(Employee employee: employees){
        jsonArrayBuilder.add(Json.createObjectBuilder().
                             add("employeeId",
                                 employee.getEmployeeId()).
                             add("firstName",
                                 employee.getFirstName()).
                             add("lastName",
                                 employee.getLastName()).
                             add("email",
                                 employee.getEmail()).
                             add("hireDate",
                                 employee.getHireDate())); 
}
//return the new json array
JsonArray employeesArray = jsonArrayBuilder.build();
//write the array to file
OutputStream outputStream = new FileOutputStream("emp-array.json");
JsonWeriter jsonWriter = Json.createWriter(outputStream);
jsonWriter.writeArray(employeesArray) ;
//Close the stream to clean up resources
outputStream.close();
outputStream.close();
jsonWriter.close();




Processing JSOn with JSR 353 steaming APIs
======================================================
This category of APIs supports the streaming model for both
reading and writing the JSON content.  This
model is designed to process a large amount
of data in a more efficient way.  Conceptually,
this model is very similar to
the Streaming API for XML(StaX) parser that
you might have used while dealing with XML data.

Streaming APIs are grouped in the package :

        javax.json.stream

in the JSR specficication.  In this section, we will
see how we can use streaming APIs for efficiently processing
JSON data.

List of frequently used classes in the
streaming API provided by the 
JSR353 specification:


*       javax.json.stream.JsonParser
        ------------------------------------------
        This class provides forward read-only
        access to JSON data by using the pull
        parsing programming model


*       javax.json.stream.JsonGenerator
        ------------------------------------------
        This class writes JSON to an output
        source as specified by the client
        application.  It generates the name-value
        pairs for the JSON objects and values
        for the JSON arrays


Streaming APIs read and write the content serially
at runtime in accordance with client calls, which makes them
suitable for handling a large amount of data.

Tip:  Refer to the the complete list of the streaming
APIs provided by JSR 353 visit:
====================================================
http://docs.oracle.com/javaee/7/api/javax/json/stream/package-summary.html


Before we go any further...what is the big deal with regard
to streaming data ?
==========================================================
With streaming, programmers are allowed to ask for the 
next event(pull the event) and allows state to be
stored in procedural fashion.

Streaming versus DOM
--------------------------------------------------------
Generally speaking, there are two programming models
for working with XML/JSON sets of data:

        *       Document Object Model(DOM)
        *       Streaming

DOM
-----------------------------------------------
The DOM model involves creating in-memory objects
representing an entire document tree and complete
infoset state for an XML document.  Once in memory,
DOM trees can be navigated freely and parsed
arbitrarily, and as such provide maximum flexibility
for developerts.  However, the cost of this felxibility
is a potentially large memory fottprint and significant
propcessor requirements.  This is not an issue working
with small documents.


Streaming
-----------------------------------------------
Streaming refers to a essing you want to do
before reading the XML or JSON document.


When should we coprogramming model in
which XML infosets are transmitted and parsed serially
at application runtime, often in real time, and often
from dynamic sources whose contents are not
precisely known beforehand.

Stream based parsers can start generating output
immediately, and infoset elements can be discarded and
garbage collected immediately after they
are used....all while providing a smaller memory
footprint, reduced processor requirements, and higher
general perfomance.

The primary trade-off with stream processing is that
you can only see the infoset state at one location at a
time in the doucment, the implication being
that yu need to know what procnscider XML/JSON in the following
scenarios:
-----------------------------------------------------
        *       Devices thave have limited
                resources(cell phones,
                embedded devices, appliances,
                etc)
        *       Applications that require processes
                several rquests simultaneously,
                as with an application server.





Pull Parsing versus Push Parsing
https://docs.oracle.com/javase/tutorial/jaxp/stax/why.html
=====================================================
While the DOM model involves creating in-memory
objects representing

        * With pull parsing, the client controls the
          application thread, and the client
          can only accept invocations from the parser.
          In constrast, push parsing features the 
          parser controls the application thread, and
          the client can ony accept invocations from
          the parser.

        * Pull parsing libraries can be much smaller
          



Example code for parsing incomming JSON payload
via HTTP featuring employee data :
==================================================
        emp-array.json

using package:

        javax.json.stream.JsonParser

which utilizing parsing model for sretameing


Steps
-----------------------------------------------------
1. HTTP request for url -> emp-array.json
   at url http://abc.com
   utf-8  , application/json

2. Create instance of java.json.stream.JsonParser 

3. Create instance of ArrayList<Employee>

4. Create instance of InputStream

5. While there is data available, return the event
   for the next parsting state.  The posistion
   of the parser is after the '{' 
        5.1 New instance of Employee
        5.2 Initialize fields in Employee
            per corresponding field from
            the corresponding


//==============Code===================//
import javax.json.stream.JsonParser;

InputStream inputStream = getClass().getResourceAsStream
("/emp-array.json");
JsonParser jsonParser = Json.createParser(inputStream);
while(jsParser.hasNext()){
        Event event = jsonParser.next() ;
        if(event.equals(JsonParser.Event.START_OBJECT){
                employee = new Employee();
                employeeList.add(employee);
        }else if(event.equals(JsonParser.Event.KEY_NAME)){
                String keyName = 
                jsonParser.getString();
                switch(keyName){
                        case "firstName":
                        jsonParser.next();
                        employee.setFirstName(
                                jsonParser.getString());
                        break;
                        case "lastName":
                        jsonParser.next();
                        employee.setLastName(
                                jsonParser.getString());
                        break;
                        case "employeeId":
                        jsonParser.next();
                        employee.setEmployeeId(
                                jsonParser.getString());
                        break;
                        case "hireDate":
                        jsonParser.next();
                        SimpleDateFormat dateFormat =
                        new SimpleDateFormat("yyyy-MM-dd");
                        Date hireDate = dateFormat.Parse
                        (jsonObject.getString("hireDate"));
                        employee.setHireDate(hireDate);
                        break;
                }        
        }
}



^^^^What's going on here ?
========================================
Remember that JsonParser parses JSON by using the
pull parsing programming model.  In this case, the client
application code controls the progress of parsing. Which makes sense, as we are requesting a payload from some
server and then upon reciept we submit to an input
stream and then in turn submit that inputstream to
our json parser(from the stream api) and then read
out it's contents object by object.

In response to the next() call from the client,
the parser generates the following events on 
the basis of the type of the next token encountered:

        *       START_OBJECT
        *       END_OBJECT
        *       START_ARRAY
        *       END_ARRAY
        *       KEY_NAME
        *       VALUE_STRING
        *       VALUE_NUMBER
        *       VALUE_TRUE
        *       VALUE_FALSE
        *       VALUE_NULL

To better understand this, consider the following JSON array
as the input to the parser:

        [{"country":"IN"}]

The parser generates the START_ARRAY event for the first call to next() and the START_ARRY event with the second
call to the next() method, and so on
 

START_ARRAY      KEY_NAME   VALUE_STRING  END_ARRAY
   |             |                |          |
   |             |                |          |
   [    {       "country"   :    "IN"   }    ]              
        |                               |
        |                               |
        START_OBJECT                  END_OBJECT



Using streaming APIs to generate JSOn
=========================================
We can use javasx.json.stream.JsonGenerator to 
write JSON data to an output source as a stream of
tokens.
