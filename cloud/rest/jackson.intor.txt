Using Jackson API for processing JSON

Jackson is a multipurpose data processing 
Java library.  The primary capability
of this tool is the support for processing JSON.
It also has addtional modules for processing
the dta encoded in other popular formats such
as:

        *       Apache Avro
                -       Data serialization
        *       Concise Brinary Object Rep.
                -       binary JSON
        *       Smile
                -       binary JSON
        *       XML
        *       CSV
        *       YAML

Jackson's alternative methods for processing JSON:
================================================
        *Tree model APIs:
                -This method provides APIs
                 for building a tree representation
                 of a JSON document
        *Data binding API:
                -This method provides APIs for converting
                 a JSON document into and form Java objects
        *Streaming API:
                -This method provides streaming APIs
                 for reading and writing JSON documents


Using Jackson tree model APIs to query and update 
data
==============================================
com.fasterxml.jackston.databaind.ObjectMapper
------------------------------------------------
Converts the JSOn data into a tree
representation.  This calss has variety of
APIs to build a tree from the JSON data.
ObjectMapper class helps you deserialize the 
JSON content as a tree(expressed using
a set of JsonNode instances).
         
com.fasterxml.jackson.databind.JsonNode
----------------------------------------------
These are the node types that make up the 
the tree...similar to DOM nodes in
an XML DOM tree.  You can also navigate
through JsonNode to identify specific elements
present in the tree hierarchy.  The following
example illustrates the use of
Jackson tree model APIs.


//================Code Generalized tree representation of JSON content===============================
import com.fasterxml.jackston.databaind.ObjectMapper;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ObjectNode ;

InputStream inputStream = getClass().getResourceAsStream("/emp-array.json");
ObjectMapper objectMapper = new ObjectMapper() ;
JsonNode rootNode = objectMapper.readTree(inputStream);
if(rootNode.isArray()){
        for(JsonNode objNode: rootNode){
                JsonNode emailNode = objNode.path("email");
                if(emailNode.textValue() == null){
                        String generatedEmail=
                        getSystemGeneratedEmail();
                        ((ObjectNode)objNode).put("email",
                        generatedEmail);
                }
        }
}
File jsonFile = new File("emp-modified-array.json");
objectMapper.writeValue(jsonFile,rootNode);
if(inputStream != null){
        inputStream.close();
}




binding APIs
=========================================================
Jackson data binding is use to convert the JSON
representation into and from Plain Old Java Object(POJO)
by using property accessors or annotations.  With this
API, you can either generate generic collection classes
or more specific Java


Simple Jackson data binding with generalized
objects
=========================================
Sometimes we may need to deal with highly
dynamic JSON content where you may not
be able to map data to a specific
Java object as the structure of the data
changes dynamically.  In such
a scenario, you can use the simple binding
APIs offered by teh Jackson framework.  You
will use Java:

        maps
        lists
        strings
        numbers
        Booleans
        nulls

The following code snippet converts a 
JSON string into a map object:
========================================

//=============converting JSON into a map object========

import com.fasterxml.fasterxml.jackson.core.type.TypeReference;

String jsonString ="
"{\"firstName\":\"John\",\"lastName\":\"Chen\"}";
ObjectMapper objectMapper = new ObjectMapper();
Map<String,String> properties = objectMapper.readValue(jsonString,new TypeReference<Map<String,String>>() {});




Full Jackson data binding with specialized objects
===================================================
If the JSON data format is well structured,
we can direclty ap the conten to
a concrete Java class.  A full data binding
solution fits such a scenario.

For example, we can create an Employee class
for representing the employee data presented in
the JSON format as long as the JSON content structure
does not change.


//emp.json file has following contents:
//{"employeeId":100,"firstName":"John","lastName":"Chen"}
ObjectMapper objectMapper = new ObjectMapper();
Employee employee = objectMapper.readValue(new File("emp.json"),Employee.class) ;


Creating a Java collection containing the 
Employee objects from a JSON array
of employees.  Here, we need to construct a
Java collection type, indicating the type
of elements in the collection.


//=============converting JSON into a map object========

import com.fasterxml.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.type.TypeFactory;

ObjectMapper objectMapper = new ObjectMapper();
CollectionType collectionType = objectMapper.getTypeFactory().constructConllectionType(List.class,Employee.class)
List<Employee> emp = objectMapper.readValue(new File
("emp-array.json"),collectionType);


//=============converting Java Object into JSON ========

import com.fasterxml.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.type.TypeFactory;

ObjectMapper objectMapper = new ObjectMapper();
CollectionType collectionType = objectMapper.getTypeFactory().constructConllectionType(List.class,Employee.class)
List<Employee> emp = objectMapper.readValue(new File
("emp-array.json"),collectionType);

Employee employee = getEmployeeEntity();
objectMapper.writeValue(new File("emp.json"),employee);











   


Grails quick notes on action responses
==========================================
1. redirect:
        *Redirects user to some provided url
2. render:
        *renders view corresponding to the controller
         method/action(or one you provide) with the view
         making use of values within a Map(AKA "model" passed to the
        * For example....index() makes use of:
                -render()
                -params //a map/model containing params
                        //in the http request payload
                        //and whatever has been
                        //programatically added to it.
                //********Code Example************//
                params.max = Math.min(max?:10,100)
                //********URL request example******//
                http://tekdays.com/Tekdays/index?max=100
                http://tekdays.com/Tekdays/index?fuck=me
                http://tekdays.com/Tekdays/index?crack=cocain
         view
3. respond:
         *Looks at the requested content type in the request
          HTTP header and determines what should be returned
          Makes things easier sometimes? 
         *Accepts as parameters:
                -view
                -Model(params map)
               


Another reason for secruity review of code
==============================================
http://localhost:8080/TekDays/tekEvent/delete/1

^^^ could be mitigated via the following code:
    static allowedMethods = null
    if(session.admin == true){
        allowedMethods = [save: "POST", update: "PUT", delete: "DELETE"]
    }else{
        redirect("http://tekdays.com/TekDays/unauthorized")
    }
Note:  TekEvent.list()  takes params also....I am getting
        the feelign all actions by default takes
        params by default.


Is this also possible ?
---------------------------------------------------------
http://localhost:8080/TekDays/tekEvent/save/?name=Jcon&venue=hotel.....



<g:message> tags
==========================================
In the generated views, Grails uses this gsp
tak to read text fro lables, buttons, and other elements
from message bundles, wich are contained in
grails-app/i18n under our app directory.

<g:message> ensures that if somebody were to 
be using our app with a different locale,
our user interface would be presented in the correct language
<g:sortableColumn> tag is what Grails uses to provide
sorting on our list views. Note that, by default, 
this owrks only with regular properties, not object
references or collections.  That is why we see the tag:

        <th> 
used for the organizer property.

<g:each in="${tekEventInstanceList}" status="i"var="tekEventInstance">

        <tr class="${(i % 2) == 0 ? 'even' : 'odd'}">
                <td><g:link action="show" id="${tekEventInstance.id}">
                ${fieldValue(bean:tekEventInstance,
                  field:"name")}</g:link></td>
              <td>${fieldValue(bean:tekEventInstance,
                  field:"city")}</g:link></td>
              <td>${fieldValue(bean:tekEventInstance,
                  field:"description")}</g:link></td>
              <td>${fieldValue(bean:tekEventInstance,
                  field:"description")}</g:link></td>
              <td>${fieldValue(bean:tekEventInstance,
                  field:"organizer")}</g:link></td>
              <td>${fieldValue(bean:tekEventInstance,
                  field:"venue")}</g:link></td>
              <td><g:formatDate
                        date="${tekEventInstance.startDate}"
                  /></td>
        </tr>
</g:each>



