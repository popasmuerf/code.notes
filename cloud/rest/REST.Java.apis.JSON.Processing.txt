

Java tools and frameworks JSON for processing 
==================================================================
        *       Using the JSR 353 -- Java API for processing
                JSON

        *       Using the Jackson API for processing JSON
        *       Using the Gson API for processing JSON


Understanding JSON basic syntax
======================================================
JSON at it's core is more or less an 
unordered collection of name-value pairs.
Names in an object of strings, and values
may be of any of the valid JSON data types such as:

        * number
        * Boolean
        * array
        * object
        * null

JSON representation of a department object:
===============================================
{"departmentId":10,
 "departmentName":"IT",
 "manager":"John Chen"|
}

All the values of an array may be of a different type
or all the same type:
================================================

{"departmentId":10,
 "departmentName":"IT",
 "employee":[{"firstName":"John","lastName":"Chen"},
             {"firstName":"Ameya","lastName":"Job"},
             {"firstName":"Pat","lastName":"Fay"}],
 "location":["New York","New Delhi"]
}


Processing JSON data
=======================================================
If you use Java RESTful web service frameworks, such as
JAX-RS, for building RESTful web APIs, the serialization
and deserialization of the request and response messages
will be taken care of by the framework.  Understanding the
JSON structure and tolls for processing JSON will definitely
hlep you when the default offering by the framework
does not meet some requirement.


Basic marshalling of RESTful web services application

                    ------------                ----------  
Request ----------> |JSON READER| ------------> |Java     |
                    |    &      |               |REST API | 
Response <----------|Writer     |<------------- |         |       
                    -------------               -----------


Object Model
---------------------------------------------------------
In this model, the entire JSON data is 
read into memory in a tree format.  This tree can
be traversed, analyzed, or modified with the
appropriate APIs.  As this approach
loads the entire content into the memory
first and then starts parsing, it ends up consume
more memory and CPU cycles.  However, this model
gives more flexibiligy while manipuluating the content.


Streaming model:
-------------------------------------------------------------
The term streaming is very generic in meaning and can be used
in many aspects.  In our discussion, this term means that
data can be read or written in blocks.  This model does not 
read the entire JSON content into the memory to get
started with parsing; rather, it reads one element at a time.
For each token read, the parser generates appropiate events 
indicating the type of token, such as the start or end of an 
array, or the start or end of the object and attribute values
A client can process the contents by listening for apporpiate
events.  The most important point is that instead of letting
the parser push the content to the client(push parser), the client can
pull the information from the parser as it needs(pull parser).
In this model, the client is allowed to skip or stop
reading contents in the middle of the process if it has
finished reading the desired elements.

Conscider using streaming APIs in the following
situations:
        *       When the data is huge in size and it is not 
                feasible to load the entire content into the
                memory for processing the content.
        *       When the partial processing is needed and
                the data model is not fully available yet


Tip:  Referto teh complete list of teh
object model APIs available in 
JSR 353 at
==========================================
http://docs.oracle.com/javaee/7/api/javax/json/package-summary.html


Using JSR 353 -- Java API for processing JSON
======================================
JSR 353  APIs maybe classified into two categories
on the basis of the processing model followed by
the APIs:




Generating the object model from teh JSON representation
===================================================================
The example in this section illustrates the usage
of the JSR353 object model APIs for building
an object representation of the JSON data:


Our data:
--------------------------------------------

[{"employeeId":100,"firstName":"John","lastName":"Chen","email":"john.chen@xxxx.com","hireDate":"2008-10-16"},{"employeeId":101,"firstName":"Ameya","lastName":"Job","email":"ameya.job@xxx.com","hireDate":"2013-03-06"},{"employeeId":102,"firstName":"Pat","lastName":"Fay","email":"pat.fey@xxx.com","hireDate":"2001-03-06"}]


/** Build JSON using JSR-353 Jersey implementation
*/

//Import statements for the core classes

import java.io.InputStream;
import javax.json.JsonArray;
import javax.json.JsonRead;

//Get input stream for reading the specified resource

InputStream inputStream = 
getClass().getResourceAsStream("/emp-array.json");

//Create JsonReader to read JSON data from a stream

Reader reader = new InputStreamReader(inputStream, "UTF-8");
JsonReader jsonReader = Json.createReader(reader);

//Creates an object model in memory.
JsonArray employeeArray =  jsonReader.readArray();



^^^ javax.json.Json instance is the factory class that
we use for creating a JSON processing object.  We will use
this JSOn class to create the javax.json.JsonReader instance.

After createing a new javax.json.JsonReader instance,
we need some JSON content to provide an 
appropriate object model.  As the JSON data that we
use in this example holds an array of employee objects,
we call :

        readArray()

on  the JsonReader instance to retrieve :

        javax.json.JsonArray

The JsonArray instance contains an ordered sequence of zero
or more objects read from the input source.



Note
==================================================
If the input is a JSON object, you can call readObject()
on JsonReader to retrieve the JSON object that is presented in
the input source.

Now, let's see how to convert JsonArray elements into
specific object types.  In this example, we will convert
each JsonObject present in
employeeArray into an Employee object:

//All import statements are removed for brevity

public class Employee{
        private String firstName;
        private String lastName;
        private String email ;
        private Integer employeeId;
        private java.util.Date hireDate;

        //Getter and setters in this code is left out
        
        //Iterate over employeeArray(JSonArray)
        //and process each JSONObject
        List<Employee>() employeeList = new
        ArrayList<Employee>();
        for(JsonValue jsonValue:employeeArray){
                if(jsonVAlue.getValueType().equals(
                jsonValue.ValueType.OBJECT)){
                  JsonObject jsonObject =
                  (JsonObject) jsonVAlue;
                  Employee employee = new Employee();
                  employee.setFirstName(jsonObject.getString("firstName"));
                  employee.setLastName(jsonObject.getString("lastName")); 
                  employee.setEmployeeId(jsonObject.getString("employeeId"));
                  SimpleDateFormat dateFormat = new  SimpleDateFormat("yyyy-MM-dd");
                  Date hireDate = dateFormat.parse(jsonObject.getString("hireDate");
                  employee.setHireDate(hireDate);
                  employeeList.add(employee);
                }
        }

}


Release system resources when appropiate
=============================================================
if(inputeStream != null{
        inputStream.close();
}
if(jsonReader != null){
        jsonReader.close();
}



Generating the JSON representationfrom the object model
=========================================================

