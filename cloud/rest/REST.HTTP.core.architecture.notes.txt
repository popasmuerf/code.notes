


client
    |
    |
    |
    |
    |
    |
GET/index.html HTTP/1.1
Host:www.example.com    
User-Agent: Mozilla/5.0 -----------request-------->Web Server
Accept:text/html                                     |
Accept-Language:en-US,en:q=0.5                       |
Accept-Encoding:gzip,deflate                         |
Connection:keep-alive                                |
                                                     |
                                                     |
                                                     |
                                                     |
                                                     |
                                                     |
                                                     |
                                                     |
                                    HTTP/1.1 200 OK
                                    Accept-Ranges:bytes
                                    Cache-Control:max-age=604800
                                    Content-Type:text/html
                                    Date:Wed,03 Dec 2014 15:05:59 GMT
                                    Content-Length: 1270
                                    <html>
                                        <head>
                                        </head>
                                        <body>
                                            Hello World!!!!
                                        </body>
                                    </html>
                                                   |
                                                   |
                                                   |
   client<--------------response-------------------|
                                          
                                                 
                                                 
Sequence of events
===============================================================
*   client submits a GET request for url http://www.example.com/index.html 
*   Browser establishes a connection with http://www.example.com
*   GET request contains modifiers and client information:

    GET /index.html  HTTP/1.1
    Host: www.example.com
    User-Agent: Mozilla/5.0
    Accept: text/htmlAccept-Language: en-US,en;q=0.5
    Accept-Encoding: gzip, deflate
    Connection: Keep-alive
 
*   Server responds with:

    HTTP/1/1 200 OK
    Accept-Ranges:bytes
    Cache-Control:max-age=604800
    Content-type:text/html
         HTTP/1.1 200 OK
    Accept-Ranges:bytes
    Cache-Control:max-age=604800
    Content-Type:text/html
    Date:Wed,03 Dec 2014 15:05:59 GMT
    Content-Length: 1270
    <html>
        <head>
        </head>
        <body>
              Hello World!!!!
        </body>
    </html>   
    
    
    
Understanding the HTTP request methods
======================================================================
*   GET
    -   This method is used for retrieve resources from
        the server by using a given URI
*   HEAD
    -   This method is the same as GET request, but it
        only transfers the status line  and header section
        without the response body
*   POST
    -   Posting data to server
*   PUT
    -   Modifies/updates resources pointed at by the URI
*   DELETE
    -   deletes the resource pointed at by the URI
*   TRACE
    -   echos the contents of the recieved request.  Used for debugging   
*   OPTIONS
    -   returns server supported HTTP methods
*   CONNECT
    -   establishes connections to target server over HTTP...debugging ?0
*   PATCH
    -   used for applying partial modifications to a resource
        idnetified by the URI
        
        
        
Representing content types using HTTP header fields
=========================================================================

Request
-----------------------------------------------------
*   Accept
    -   Informs the server what it expects from the
        server's response
        
*   Example:
          Accept: text/htmlAccept-Language: en-US,en;q=0.5
    
    
Responses
------------------------------------------------------
*   Content-Type Header
    -   Describes the content type(s)
        that are available to the client.
*   Example:
        Content-Type: text/html
        
        
Cotent Types
=========================================================
*   text
    -   plain text indicates that the content is plain
        text and no speicall software is required to
        read the contents.  The subtype represents more
        specific details about the content, which can
        be used by the client for special processing, if any. 
        Content-Type:text/html indidicates that the body
        contents is html, and the client can use this
        hint to kick off an appropiate rendering engine
        while displaying the response
*   multipart
    -   composed of multiple data types
*   message
    -   type that encapsulates more messages.  It allows
        messages to contain other messges or pointers to
        other messages.  For instance:
            Content-Type/partial
        allows for large messages to be broken up into smaller messages
        The entire message is assembled by the client
*   image
    -   Content-Type: image/png indicates that the body
        content is a *.png image
*   audio
    -   This type indicates the audio data.  For instance,
        Content-Type: audio/mpeg indicates that the body
        content is MP3 or other MPEG audio.
*   video
    -   This type indicates the video data.  For instance,
        Content-Type: video/mp4 indicates that the body conten
        is MP4 video.
*   application
    -   this type represents the application data or
        binary data.  For instance, Content-Type:application/json; charset=utf-8
        designates the content to be in the JS object Notation(JSON) format,
        encoded with UTF-8 character encoding.
        
        
For complete list of extant subtypes...
===========================================================
http://www.iana.org/assignments/media-types/media-types.xhtml



The core architectural elements of 
a RESTful system
==========================================================
Having learned the basics of a RESTful system,
you are now ready to meet the more exciting
concepts of REST.

A uniform interface is fundamental to the architecture
of any RESTful system.  In plain words, this term referes to
a generic interface to manage all interactions etween
a client and a server in a unified way.  All resources (or business data)
involved in the client-server interactions are dealt with
by fixed set of operations.  The following are core elements
that form a uniform interface for a RESTful system:

        *       Resources and their identifiers
        *       Representations of resources
        *       Generic interaction semantics for the REST resources
        *       Self-descriptive messages
        *       Hypermedia as the engine of an application
                state.


Resources
-------------------------------------------------------
A RESTful resource is anything that is addressable over
the Web.  By addressable, we mean resources that can be 
acessed and transferred between clients and servers.
Subsequently, a resource is a logical, temporal mapping to a 
concept in the problem domain for which we are implementing
a solution.

Here are some examples of REST resources:

        *       A news story
        *       The temperature in NY at 4:00 pm EST
        *       a tax return stored in the IRS database
        *       A list of code revision history in a repository
                such as SVN, Git or CVS 
        *       A student in a classroom in a school
        *       A search result for a particular item
                in a Web index, such as Goolge

Even though a resource's mapping is unique, different requests
for resource can return the same underlying binary
represenstation stored in server.  For example, let's say
we have a resource within the context of a publishing system.

then, a request for the latest revision  published and a request
for revision number 12 will at some point in time return the
same representation of the resource.  In this example,
the last revision is Version 12. However, when the latest revision
published is increased to Version 13, a request to the latest
revision will retrun Version 13.  This implies that in a RESTful
architecture, each resource can be accessed directly and indpendently,
and sometimes, different requests may point to the same resource.


HTTP and REST
==========================================================
As we are using HTTP to communiate, we can transfer a
variety of data types between clients and servers
as long as the data type used is supported by HTTP.
For example:
        *       test file from CNN
        *       Flash movie from YouTube
The data is streamed in both cases over TCP/IP
and the browser knows how to interpret the binary streams
beause of the Content-Type header present in the HTTP  response
header.  Following this principle, in a RESTful system
the represnetation of a resource in the response body
depends on the desired Internet media type, which is specified
within the request hader by the client.



URI
---------------------------------------------------
A URI is a string of characters used to identify a 
resource over the Web.  In simple words, the URI
in a RESTful web service is a hyperlink to 
a resourcew, and it is the only means for clients
and servers to exchange representations.

The client uses a URI to locate the resources over Web and
then, sends a request to the server and reads 
response.  In a RESTful system, the URI is not meant to 
change over time as it may break the 
contract between a client and server.



Representation of resources
---------------------------------------------------
The representation of resources is what is sent back and forth between  clients and servers in a RESTful system.
A prepresentation is a temporal state of the 
actual data located i nsome storage
devide at the time of the requst.  In general terms,
it is a binary stream together with its metadata that describes
how the stream is to be consumed by the client.  The
metadata can also contain extra information about the resource, for example, validation, encryption indormation
, or extra code to be executed at runtime.
Different clients may consume different representations
of the same resource.
A representation can take various forms:
----------------------------------------
        *       XML
        *       JSON
        *       etc

However, all clients will use the same URI
with appropiate Accept header values for 
accessing the same resource in different 
representations.



Generic interaction semantics for REST
resources
=====================================================
In summary, We learned that resources are mappings
of the actual entity states that are exchanged
between clients and servers.  Further, we discussed that
representations are negotiated between clients and servers through the communication protocol(HTTP) at runtime.  Now let's learn about the generics of interaction semantics and
self-descriptive messages followed for the client-server 



Developing RESTful web services is similar to what we have
been doing up to this point with our web applications.
In a RESTful web serv ice, resources are exchanged
between the client and the server, which represents the
business entitities or data.


Developing RESTful web services is similar to what we have
been doing up to this point with our web applications.
In a RESTful web service, resources are exchanged between
the client and the server, which represhents the business
entities or data.  HTTP specifies methods or
actions for resources.  The most commonly used HTTP
methods or actions are:
        *       POST
        *       PUT
        *       GET
        *       DELETE

This clearly simplifies the REST API design and 
makes it more readable, on the other hand..in traditional
application development, we can have countless
actions with no naming or implementation standards.
This may call for more development effort for both the 
client and theserver, and make the APIs less readable.


Mapping of REST and CRUD actions
================================
CREATE          POST  or PUT

READ            GET

UPDATE          PUT or PATCH

DELETE          DELETE

OPTIONS         OPTIONS

HEAD            Retrieve info pertaining
                to the entity without 
                having the entity itself 
                in the response


REST in it's simplest form
========================================
In their simplest form, RESTful web services
are networked applications that manipulate
the state of resources.  In this context, resource
manipulation means resource creation,
retrieval, update, and deletion.  However, RESTful
web services are not limited to just these four 
basic data manipulation...as they may also be used
for executing business logic on the server, but remember that
every result must be a resource representation of the domain at hand.




HTTP GET
=======================================================
JSON representation of a department looks
like the following:
[{"departmentId":10,"departmentName":"IT",
 "manager":"John Chen"},
 {"departmentId":20,"departmentName":"Marketing",
 "manager":"Ameya J"},
 {"departmentId":30,"departmentName":"HR",
 "manager":"Pat Fay"}, 
]


With our representations defined, we now assume URIs of the
form:

http://www.umd.edu/departments
http://www/umd.edu/resoruces/dempartments/{name}

Pro-tip
---------------------------------------------------
This is just an example, and as such, we treat
the department name as a unique iddentifier here.
Note that in real life, you can use a 
server-generated identifier value, which does not
repeate across entities, to uniquelyu identify a resource
instance.


Making requests to our web service
==================================================
We want a record for the IT department....

http://www.umde.edu/resources/departments/IT
--yeilds

{"departmentId":10,"departmentName":"IT",
 "manager":"John Chen"}

Let's have a look at the request details.
A request to retrieve details of the 
IT department uses the GET method with
the following URI

http://www.umd.edu/resources/departments/IT



client
    |
    |
    |
    |
    |
    |
GET/index.html HTTP/1.1
Host:www.umd.edu    
User-Agent: Java/1.8.0_25 -----------request-------->Web Server
Accept:application/json                              |
Accept-Language:en-US,en:q=0.5                       |
Accept-Encoding:gzip,deflate                         |
Connection:keep-alive                                |
                                                     |
                                                     |
                                                     |
                                                     |
                                                     |
                                                     |
                                                     |
                                                     |
                                    HTTP/1.1 200 OK
                                    Accept-Ranges:bytes
                                    Cache-Control:max-age=604800
                                    Content-Type:application/json
                                    Date:Wed,03 Dec 2014 15:05:59 GMT
                                    Content-Length: 80
                                    {"departmentId":10,"departmentName":"IT",
                                     "manager":"John Chen"}
                                                   |
                                                   |
                                                   |
   client<--------------response-------------------|
                                          

What's going on here:
================================================
1. A java client makes an HTT

