What is a Microservice Archtiecture?
==========================================================
Microservice architecture (MSA) is an approach to building software
systems that decomposes business domain models into smaller,
conssisten, boudned-contexts implemented by services.  These services
are isolated and autonomous yet communicate to procide some piece
of business functionallity.   Microservices are typically implemented
and operated by small teams with enough autonomy that each
team and services can change its internal implementation
details


Independence breads agility.....kind of....




Microservices allow you to scope the boundaries of a service effectively
========================================================================4
    *   Understand what the service is doing without being tanbled
        into other concerns in a larger application
    *   Quickly build the service locally
    *   Pick the right technology for the problem(lots of writes? lots of
        queries? low latency? bursty?)
    *   Test the service
    *   Build/deploy/release at a cadense necessary for the buisiness,
        which ay be independent of other services
    *   Advantages of autonomous teams and services....
        
        
Things you wont' miss once you  have adopted microservices
======================================================================
    *   Incessant Jira tickets
    *   Unnecessary meetings
    *   Shared libraries
    *   Enterprise-wide canonical models
    
    
Challenges
==========================================================================
    *   Network reliability
    *   Network latency.....
    
    
    
We should described contexts within a visual context map
==========================================================================
Through each iteration we remove ambiguity and come up
with bounded contexts that are in turn sub-components of 
of the overall extant Contex....


Context ----------------> Bounded Context
    |
    |
    |-------------------> Bounded Context
    |
    |
    |-------------------> Bounded Context
    
    
Distributed Systems Management
===============================================================================
    *   How do we start and stop a fleet of services ?
    *   How do we aggregate logs/metrics/SLAs across microservices
    *   How do we discover services in an elastic enviroment where
        they can be comming, going, moving etc ?
    *   How do we do load balancing?
    *   How do we learn about the health of our cluster or indvidual
        services ?
    *   How do we do fine-grained API routing ?
    *   How do we secure our services ?
    *   How do we throttle or disconnect parts of a cluster if it starts to
        crash or act unexpectedly ?
    *   How do we deply multiple version of a service and route to them
        appropiately ?
    *   How do we make confguration changes across a large 
        fleet of services ?
    *   How do ew make chages to our application code and configuration
        in safe, auditable, repeatable manner ?
        
        
Technology Solutions
=================================================================================
Througout the rest of the book, we'll introduce you to soe
popular technology components and how they help solve some of the problems
of developing and selivering software usin a microservice archtechture.
Keep in mind....microservices is not just a tech problem....getting
the right org structure and teams in place to facilitate microservices is 
paramount.  Switching from SOAP to RESt doesn't make a micorsercie architechture.


The first step to building microservices is to get somethign working locally on
your machine.


Our tools
=================================================================================
    *   Spring Boot
    *   Drop Wizard
    *   WildFly Swarm
    *   Vagrant
    *   Virutal Box
    *   Container Development Kit
    *   Kubernetes/OpenShift CLI
    *   Docker CLI(optional)
    
    
    
Spring Book for Microservices
===============================================================================
*   Favoring autoatic, conventional configuration by defualt
*   Curating sets of popular starter dependencies for easier consumption
*   Simplifying application packaging
*   Baking in application insight(metrics and enviroment info)


Spring Boot Starter Dependencies
===============================================================================
*   JPA persistence
*   NoSQL databases like MongoDB, Cassandra, and Couchbase
*   Redis Caching
*   Tomcat/Jetty/Udertow servlet engine
*   JTA transactions


Adding a submodule to your application brings in the curated
set of transitive dependencies and versions that are known to work
together saving developers from having to sort out 
dependencies themselves
        
Production Ready
===============================================================================    
Spring ships witha  module called actuator which enables the view of
things like:
    *   metrics
    *   thread dumps
    *   enviromental variables
    *   gadbage collection stats
    *   BeanFactory(bean config)
    *   Protocal support:
        -   HTTP
        -   JMX
        -   SSH
        
        
Getting Ready
===========================================================================
We are going to use Spring Boot command-line to bootstrap
our first Spring  Boot application(Spring uses Spring Initializr under the covers)
You are free to explore the different ways to do this
if your not comfortable with CLI machinations(lolz...but we are...)


> spring --version
Spring CLI v1.4.1.RELEASE

spring init --build maven --groupId com.redhat.examples \
--version 1.0 --java-version 1.8 --dependencies web \
--name hola-springboot hola-springboot

    -or-(?)
    
>spring init --build gradle --groupId com.redhat.examples \
--version 1.0 --java-version 1.8 --dependencies web \
--name hola-springboot hola-springboot

    
    
Breakdown of the above...
------------------------------------------------------------------------------------
--build
    the build-managemtn tool we want to use.  Maven or gradle
    are the two valid optons at this time
--groupId
    the groupId to use in our maven coordinates for
    our pom.xml; unfortunatly this does not properly
    extend to the Java package names that get
    created.  these need to be modified
    by hand.
--version
    the version of our application' will be used in later iterations,
    so set to 1.0
--java-version
    Allows us to specify the build compiler version of the JDK
--dependencies
    This is an interesting parameter; we can specify fully baked sets
    of dependencies for doing common types of development.  For
    example, web will set up Spring MVC and embed an internal
    servlet engine(Tom cat by default; Jetty and Undertow as options)
    Other convenient dependency bundles/starters include
    jpa, security , and cassandra   
        

Running your project
==============================================================
> mvn spring-boot:run
> gradle spring-boot:run (?)




Exposing endpoints and modifying them....
==================================================
> cd /home/mikeyb/src/spring/boot/hola-springboot/src/main/java/com/example
> vim HolaRestController.java

/**
    @RestController
        -   Tells Spring this is an HTTP controller capable of exposing
            HTPP endpoints (GET,PUT,POST,DELETE,etc)
            
    @RequestMapping
        -   Map specific parts of the HTTP URI path to classes, methods,
            and parameters in teh Java code
*/
@RestController
@RequestMapping("/api")
public class HolaRestController{
    @RequestMapping(method = RequestMethod.GET, value = "/hola", produces = "text/plain")
    String hostname = null ;
    try{
        hostname = InetAddress.getLocalHost().getHostAddress();
    }catch(UnknownHostException e){
        hostname = "unknown";
    }
    return "Hola Spring Boot de " + hostname ;
}


Externalize Configuration
=======================================================
Spring Book makes it easy to use external property
cources like properties files, command-line arguments,
the OS enviroment, or
Java System properites.  We can even bind
entire  "classes" of properties to objects in
our Spring context.  For example if we wished
to to bind all helloapp.* properties
to our HolaRestController, We can add the 
annotation:

    @ConfigurationProperites(prefix="helloapp")
    
...and Spring Boot will atumatically try to 
bind helloapp.foo and helloapp.bar and hello.bar
to Java Bean  properties in teh HolrestController class.



Let's define a new property
==============================================================
> cd /home/mikeyb/src/spring/boot/hola-springboot/src/main/resources
> vim application.properties

helloapp.saying=Guten Tag aus


> cd /home/mikeyb/src/spring/boot/hola-springboot/src/main/java/com/example
> vim HolaRestController.java

/**
    @RestController
        -   Tells Spring this is an HTTP controller capable of exposing
            HTPP endpoints (GET,PUT,POST,DELETE,etc)
            
    @RequestMapping
        -   Map specific parts of the HTTP URI path to classes, methods,
            and parameters in teh Java code
*/
@RestController
@RequestMapping("/api")
@ConfigurationProperties(prefix="helloapp")
public class HolaRestController{
    private String saying ;
    @RequestMapping(method = RequestMethod.GET, value = "/hola", produces = "text/plain")
    public String hola() throws UnknownHostException{
        String hostname = null ;
        String hostname = null ;
        try{
            hostname = InetAddress.getLocalHost().getHostAddress();
        }catch(UnknownHostException e){
            hostname = "unknown";
        }
        return "Hola Spring Boot de " + hostname ;
    }
    public String getSaying(){
        return saying;
    }
    public void setSaying(String saying){
        this.saying = saying;
    }
}












301-535 3453  RJ

301-968-3434  Rachel Vista Science

617 848 1107  Chris Cyber Cutters

703-206-4146  Erica Wallace

535-3453  Robert SE solutions

