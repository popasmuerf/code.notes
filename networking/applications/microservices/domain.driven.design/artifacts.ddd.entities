Artifacts of Domain Driven Design(DDD)
=================================
There are different artrifacts
used in DDD to express,
create, and retrieve domain
models....


Entities
==============================
There are certain categories
of objects that are identifiable
and remain same througout
the states of the
product/services.  These
objects are not defined by
its attributes, but by its
identity and thread of
continuity.  This is not
a trivial matter, and one nees
to understand how to define 
these entities....

Example of an entity
------------------
	*	Restaurant is a class
	*	We can have two or more
		instances of Restaurant
	*	The instances of this
		restaurant should not
		be identified by it's
		name as there could be
		more than one instance
		of this restaurant(in the 
		case of franchises)
	*	If like the name of the
		restaurant chain all the
		additional attributes
		of the instances are not
		unique to a particular
		instance, then none of the
		attributes may be used
		for effective identification
	*	A UUID would be an attribute
		for all instances of 
		Restaurant that would be
		conscidered an entity 
		as it remains unique to
		each instance
	*	Creating an entity is
		providing identity to an
		object.

Examples of creating unique ids
--------------------------------
	*	Primary keys for records
	*	auto generated ID via a 
		domain model.
	*	Real life objects carrying
		user-defined identifiers
		themselves.  For example,
		each nation has it's own
		country codes for dialing
		ISD calls

	*	An attribute or combination
		of attributes can also be used
		for creating an identifier as
		explained for the preceding
		restaurant object

The importance of Entities for domain
models
--------------------------------------
Their importance cannot be understated,
therefore they should be defined
from the initial stage of the modeling
process.  When an object can 
be identified by its identifier and
not by its attributes, a class of 
these objects shold have a simple definition
and care shold be taken with the life
ccle continuity and i dentity.







Presentation Layer
==============================
This layer represents the UI and 
provides the user interface for
teh interaction and information
display.  This layer could be 
a web application, mobile app 
or a third-party application
consuming your services.


Application layer
==========================
This layer is responsible for application
logic.  It maintains and coordinates
teh overall flow of the 
product/service.  It does not
contain business logic or UI.
It may hold the state of application
objects like tasks in
progress.  For example, your
product REST services would 
be teh part of this application
layer.

Domain layer
=============================
The domain layer is a very
important layer as it contains
information and business logic.
It persists the state of the 
business objects,and communicates
these persisted states to
the infrastructure layer.



Infrastructure layer
=========================
The layer provides support to all the 
other layers and is responsible for
communication among the other
layers.  It contains the supporting
libraries that are used by
the other layers.  It also implements
the presistence of business objects.









Domain-Driven Design fundamentals
=============================================
An enterpise or cloud application solves business problems
and other real world problems.  These problems cannot be 
reaolved without knowledge of the the domain.
Combining domain and software design, it offers a software
desing methodology known as DDD.

When we develop softare to implement real world
scenarios offering the functionalities of a domain, we create
a model of the domain.  A model is an abstractio or blueprint
of the domain.



Desining models
=========================================
It's not rocket science...but it does/will
involve refinement and input via domain experts.
Designing models is a collective effort that involves:

	*	SMEs
	*	Software Designers/Architects/engineers
	*	Programmers

General process:
------------------------------------------
	*	Organize information
		-	Divide it into smaller parts
				*	Group parts into logical modules
						-	Take up module...or repeat process until
							a module can no longer be reasonably
							broken down.

	*	Document model
	*	Code design into a Domain modeld code desing
	*	Implement Domain model




