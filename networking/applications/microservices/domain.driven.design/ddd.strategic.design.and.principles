Strategic design and principles
=================================
Enterprise models are usually
ver large and complex.
It may be distributed among
different departments
oin an organization.  Each 
department may have separte leadership
teams, so working and designing
together can create difficultuy
and coordination issues.  In such
scenarios, maintaining inegreity
of the doamin model is not
an easy task.

In such cases, working on
a unified model is not the solution
and large enerprise models
need to be divided into
differnt submodels.

There are various pinciples that could be 
followed to maintain the integrity of the 
domain model. and are listed as follows:

*	Bounded context
*	Continuous integration
*	Context map
		*	Shared Kernel
		*	Customer-supplier
		*	Conformist
		*	Anticorruption layer
		*	Seperate ways
		*	Open host service
		*	Distillation

Bounded Context
====================
	*	having different  sub-models
		makes it difficult to
		maintain code when all 
		submodels are combined.
	*	Small models should be
		assinged to a single team:
			*	Models should always
				consist of related
				elements
			*	Keep each submodel
				well-defined and
				consistent. 

			*	This way we can refactor each
				model independently without
				affecting the other
				submodels. this 
				gives the software designer
				the flexibility to refined
				and improve it at any
				point in time

			*	Example of two domain models
				within the same system that
				have there own bounded context:
					*	online resrvation
						system
					*	offline reservation
						system


Continuous integration
===============================
When you are devloping , the code is 
scattered among many teams
and various technologies.  This code
may be organized into different
modules and has applicable bounded 
context for respective submodels.

	*	Prone to duplicate code
	*	Prone to code breakage
	*	Prone to breaking 
		context bounds
	*	Agile and DDD methodologies
		often has teams developeing
		before the design has been
		fully realized

^^^Continuous integreation 
is a solution to this.


What is continuous integration?
=========================
Cod is mereged frequently to avoid
any breaks and issues withthe domain
model.  Merged coe not only gets
deployed but it is also tested
on a regular basis.  There are
varioius continuous integration 
tools avaiabe in the market
that :
	*	Merges code
	*	builds code
	*	Tests code
	*	deploys code

on a schedule basis

Popular C.I. tools
=====================
	*	TeamCity
	*	Jenkins
	*	Hudson


Context map
=========================
The context map helps you to understand
the overall picture of a lareg 
enterprise application.  It
shows how many bonded
contexts are prestent
in the enterprise model and how
they are interrelated.

Example of Context Map
---------------------------------------

-------------------
table reservation |
Context           |
-------------------
		^
		|				------------
		|------------->| Restuaturant
					   | Ledger
					   |-------------


Shared Kernel
===============================
As the name suggests, one part
of the bounded is shared with the
other's bounded context.  As you can
see the restraurant entity is being shared between
the Table Reservation Context and the
Restaurant Ledger Context


Customer-supplier
===========================
The customer-supplier pattern representers
the relationship between bounded contexts
when the output of one bounded context
is required for the other bounded
context that is, one supplies the 
inforamation to the other (known as
the customer) who consumes the 
information.


Conformist
=================================
	*	Similar to Customer-supplier
		pattern.

	*	Unlike the CS pattern, where
		where one needs to provide
		contract and information where the
		other will use both actual temas
		are involved in having an 
		upstream/downstream relationship.

	*

Anticorruption layer
================================
	*	interats with outside
	    and external systems
	*	interacts with legacy systems
	*	Uses external system data in the 
		domain model without 
		effecting the integrtiy
		and origninatlity of the
		domain model

	*	A service can serve a
		an anticorruption layer
		that may use a facade
		pattern with an adapter
		and translator to consume
		external domain data within 
		the internal model...therefore
		your system would always use
		the service to retrive the data.

	*	An anticorruption service maintains
		a buffer between the dommain and the
		outside world...and enforces format

Seperate ways
===========================
In the case of a large enterprise
application and a domain where 
different domains have no common
elements and it's made of large
sumbmodels that can work 
independently; a designiner
could crate sperate models that 
have no relationships and devlope
a small application on top of them.

Hese small applications become a single
application when merged together.

An employer's Intranet application
that offers various small applications
such as those that are HR-related,
issue trackers, transport or 
intra-company social netwroks, is one
such application where a designer
could use the separate ways pattern



Open host service
=================================
	*	Translation layer used 
		wen two submodels interact with 
		each other
	*	Translation layers are used when
		you have one submodel that uses
		this external system.

	*	The open host service
		is required when this 
		external system is being used by
		many submodels to remove
		the extra and duplicated code because then you need to write a tanslation
		layer fore ache submodel extertnal
		system.

	*	An open host service provides the 
		services of an external system using
		wrapper to all sub-models.


Distillation
==================================
	*	Process of filterin out
		information that is not
		required.

	*	Helps identify core domain
		and essential concepts
		for your business domain.

	

D







Seperate