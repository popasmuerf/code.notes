http://spark.apache.org/docs/latest/streaming-programming-guide.html

Scala Streaming Code example
=======================================
/**
	Create a local StreamingContext with two working thread and 
	batch interval of 1 second
	The master requires a2 cores to prevent from a starvation scenario
*/
import org.apache.spark._
import org.apache.spark.streaming._
import org.apache.spark.streaming.StreamingContext._
val conf = new SparkConf().setMaster("local[2]").setAppName("NetworkWordCount")
val ssc = new StreamingContext(conf,Seconds(1))

/**
	Using this context, we can create a DStream that represents streaming 
	data from a TCP source, specified as hostname(e.g. localhost) 
	port (e.g. 9999)
*/

val lines = scc.socketTextStream("localhost",9999)



Java Streaming Code example
=======================================
/**
	Create a local StreamingContext with two working thread and 
	batch interval of 1 second
	The master requires a2 cores to prevent from a starvation scenario
*/
import org.apache.spark.* ;
import org.apache.spark.streaming.* ;
import org.apache.spark.streaming.StreamingContext.*
SparkConf conf = new SparkConf().setMaster("local[2]").setAppName("NetworkWordCount");
JavaStreamingContext jssc = new JavaStreamingContext(conf,Durations.seconds(1)) ;

/**
	Using this context, we can create a DStream that represents streaming 
	data from a TCP source, specified as hostname(e.g. localhost) 
	port (e.g. 9999)
*/

JavaRecieverInputerDStream<String> lines = jscc.socketTextStream("localhost",9999);



/**
	Generate multiple new recoreds
*/
JavaDStream<String> words = line.flatMap(new FlatMapFunction<String,String>(){
		@Override public Iterable<String> call(String str){
			return Arrays.asList(str.split(""));
		}
	}
});

/**
	Count the lines and then reduce them
*/
JavaPairDString<String,Integer> pairs = words.mapToPair(new PairFunction<String,Integer>(){
	@Override
	public Tuple2<String,Integer> call(String str){
		return new Tuple2<String,Integer>(str,1);
	}
});
JavaPairDString<String,Integer> reducedPairs = pars.reduceByKey(new Function2<Integer,Integer,Integer>(){
	@Override
	public Integer call(Integer i1, Integer i2){
		return (i1 + i2);
	}
});



