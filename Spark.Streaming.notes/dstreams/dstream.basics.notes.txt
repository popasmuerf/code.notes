DStream Basics
=============================================================================================


What is a DStream ?
-------------------------------------------------
	* Discretized Stream (DStream)
	* basic absraction in Spark Streaming
	* continuous sequence of RDDs(of the same type)
	  representing a cotinous stream of data
	* DStreams can either be created from live data or
	  it can be generated by transformation existing DStreams using
	  transformationss on existing DStreams



DStream operations
===========================================================================================

Transformations
-------------------------------------------------------
Transformation on DStreams can be grouped into either:

	*	Stateless transformations
		-	In stateless transformations the processing of
			each bach does not depened on the data of its 
			previous batches. this includes:
				*	Common RDD transformations:
						-	filter
						-	map
						-	reduce
						-	reduceByKey
						-	flatMap()
						-	groupByKey()

				*	All of the above will only perform
					transformations on each time shard
					or mini batch...but not accross shards
					or batches.

				*	There is a way to combine stateless transformation data
					across time

	*	Statefule transformations
		-	Uses data or intermediate results
			fromprevious batches to compute the results
			from previous batches to compute the results 
			of the currentbatch based on:
				*	Sliding windows
				*	Tracking state accross time



Code examples for Stateless transformations
============================================================================

/**In scala...assuming we are using ApacheAccessLog lib/api **/

val accessLogDstream = logData.map(line => ApacheAccessLog.parseFromLogLine(line))
val ipDStream = accessLogsDStream.map(entry => (entry.getIpAdress(),1))
val ipCountDstream = ipDStream.reduceByKey((x,y) => x + y)


/**In Java...assuming we are using ApacheAccessLog lib/api **/

Static final calss implements PairFunction<ApacheAccessLog,String, Long>{
	public Tuple2<String, Long> call(ApacheAccessLog log){
		return Tuple2<>(log.getIpAddress(), 1L)
	}
}

JavaDstream<ApacheAccessLog> accessLogsDStream = logData.map(new ParseFromLine());
JavaPairDStream<String,Long> ipDSream = acessLogsDStream .ampToPair(new IpTuple());
JavaPairDStream<String, Long> ipCountsDStream = ipDStream.reduceByKey(new LongSumReducer());



Joining DStreams
=============================================================

We do it just like we would with RDDs:

//-------code
val dStreamC = dStreamA.join(dStreamB)

//----or
val dStreamC = dStreamA.union(dStreamB)
