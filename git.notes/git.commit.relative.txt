git commit : relative commits
===========================
We can identify a commit relatie
to another reference, commonly
the tip of a branch.

You've seen some of these
names already such as:

	master
	-and-
	master^

where master^ always referes
to the penultimate commit
on the master branch



The topology of commits in our 
graph...
================================
Except for the first root commit,
each commit is derived from at
least one earlier commit and
possible many, where direct
ancestors are called :

	"parent commits"


For a commit to have multiple parent
commits, it must be the result of 
a merge operation....As a result,
there will ba parent commit for each
branch contributing to a 
merge commit.


Carets and commit parents...
==============================
Within a single genertion, the caret
is used to select a different
parent.  Given some commit "C",

	C^1 is the first parent
	C^2 is the second parent
	C^n is the nth parent


	Ca ----> C^1
				\	
	Cb ----> C^2------> C
				/
	Cc ----> C^3

^^^There is a merge here....and as such the commit "C" has parent commits C^1, C^2, C^3 from branches
a, b, and c


commits and tildes
=================================
The tilde is used to go back
before an direct parent in order
to select a preceding 
generation.  Again, given the 
commit C, C*^1 is the first parent
and C*~1 is the first grandpanrent,
and C*~1 is the first great-grandparent.  When there are multiple
parents in a generation, the first parent of the first parent is followedl.  You might alos
notice that both C^1 and C~1 refer
to the first parent' either name is
correct, and is shown.


	Ca~1 ----> C^1
				\	
	Cb~1 ----> C^2------> C
				/
	Cc~1 SS----> C^3




When a commit occurs, Git 
records a snapshot of the
index and places that snapshot in the
object store.  This store does not
contain a copy of every file and
directory in the index, because
su a strategy wuld require 
enrmous and prohibtive amounts
of storage.  Git creates new blobs
only for new files...otherwise it
simply just makes the required changes
to exiting files.


object becomming th enew
		master HEAD


Note: Dirty Indexes in the other direction
====================================
You can get a dirty index in the other
direction, irrecpsective of the
working dirctory state.  By
reading a non-Head commit out of the
object store into the index not 
cheking out the corresponding files
into the working directory, you create
the situation where the index and working directory are not in
aggreement and where the index is 
still dirty with respect to the
HEAD



Commits are sometimes executed
by git itself
==================================
Git itself can introduce commits.
A merge operation causes a
commit in the repository in
in addition to any commits made
by users before the merge.


When to execute commits
==============================
It's really up to you and your development style....In general, you
should perform a commit at
well-defined points in 
time when your development is
at a quiescent stage, such as when 
a test suite passes, when
everyone goes home for the day,
or any number of reasons....but
whatever you do...commit and commit
often.


Refs and symrefs
======================================
A ref is a SHA1 has ID that refers
to an object within the git object
store.  Although a ref may refer
to an git object, it usually rfers
to a commit object.  A symbolic
refernce, or sysmref, is a name
that indirectly points to a
git object.  It is still just a ref.

Local topic branch names, remote tracking branch names, and tag 
names are refs.


SHA1(ref)-----------
					|----->object
text_name(symref)---



Ref directory location
=============================
tree .git/refs
.git/refs
├── heads
│   ├── concurrency
│   ├── List
│   ├── master
│   └── microservices
├── remotes
│   └── origin
│       ├── concurrency
│       ├── f_concurrency
│       ├── HEAD
│       ├── master
│       └── microservices
└── tags
    ├── v1.0.0
    └── v1.1.0



git's speical symrefs
===================================
	*	HEAD
	*	ORIG_HEAD
	*	FETCH_HEAD
	*	CHERRY_PICK_HEAD
	*	MERGE_HEAD

Note:
------------------------------
Technically, the name of the git
directory .git can be changed.  Thus,
git's intenral documentation uses the
variable $GIT_DIR instead of the
literal .git


HEAD
=====================================
HEAD always refers to the most
recent commit on the current branch.
When you change branches, HEAD
is updated to refer to the 
new branch's latest commit.


ORIG_HEAD
=====================================
Certain operations, such as merge
and reset, record the previous
version of HEAD in ORIG_HEAD just
prior to adjusting it to a new
value.  You can use ORIG_HEAD
to recover or revert to the
previous state or to make
a comparsion.


FETCH_HEAD
=====================================
When remote repositories are used,
git fetch records the heads of all
branches fetched in the file:

	.git/FETCH_HEAD

is shorthand for the head of the
last branch fetched and is valid only
immediately after the fetch operation.  Using this symref, uyou can find the HEAD of commits from:

	git fetch

even if an anonumous fetch that doesnt specifically name a branch is
used.  

MERGE_HEAD
=====================================
When a merge is in progress, the tip of the other branch is temporarily recorded in the symref MERGE_HEAD...
In other words, MERGE_HEAD is the 
commit that is being merged into
HEAD.


Identifying Commits
=======================================
Whether you code individually or with
a team, identifying individual
commits is an essential task.  For
example, to create a branch, you
must choose a commit from which
to diverge; to compare code
variations, you must specify two
commts; and to edit the 
commit history, you must provide
a collection of commits.  In Git, you
can refer to every commit via an
explicit or an implied reference

We have already seen explicit 
references(SHA1 ID) and a few implied references(such as HEAD)



Absolute Commit Names
=====================================
The most rigorous name for a commit is
its hash identifier.  The hash ID is 
an absolute name, meaning it can
only refer to exactly one commit.  It
doesnt matter where the commit is among the entire repositor's history
; the hash id always identifies
the same commit.

Each commit ID is globally unique
====================================
...not just for one repository but for
any and all repostitories.


40-hex-digit SHAs are error prone
w/r to data entry
===================================
So we can actually shorten this
into a unique prefix...for
example:

mikeyb@cern:~/code.notes$ git log -1 HEAD
commit 87137e98c586df7f192c5ed8f0edf00e30be78cf
Author: adjunct_black <MichaelBrown172@Gmail.com>
Date:   Thu May 25 18:36:03 2017 -0400

    v1.3.0

	---is the same as---

mikeyb@cern:~/code.notes$ git log -1 8713
commit 87137e98c586df7f192c5ed8f0edf00e30be78cf
Author: adjunct_black <MichaelBrown172@Gmail.com>
Date:   Thu May 25 18:36:03 2017 -0400

    v1.3.0


Note: Tags(symrefs) are not univesally global
=========================================

















Identifying commits
======================================



