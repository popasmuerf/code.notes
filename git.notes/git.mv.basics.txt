Using git mv
==================================
Suppose ou need to move or rename a
file.  You may use a combination
of :
	> mv file-A file-B
	> git rm file-A
	> git add file-B


or we could just run:

	> git mv file-A file-B

^^^In either case git removes
the pathname file-A from the index
, adds a new pathname file-B, keeps
the original content for file-A in
the object store, and reassociates
that content with the pathname 
file-B

#######Example

mikeyb@cern:~/src/git/hello$ git mv data datfile
mikeyb@cern:~/src/git/hello$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	renamed:    data -> datfile

mikeyb@cern:~/src/git/hello$ git commit -a
[master 80129cf] ...
 1 file changed, 0 insertions(+), 0 deletions(-)
 rename data => datfile (100%)
mikeyb@cern:~/src/git/hello$ git ls-files -s datfile
100644 1269488f7fb1f4b56a8c0e5eb48cecbfadfa9219 0	datfile
mikeyb@cern:~/src/git/hello$ 



mikeyb@cern:~/src/git/hello$ git log datfile
commit 80129cf5bee030fd13aa240634fc16a8f6b9bb38
Author: adjunct_black <MichaelBrown172@Gmail.com>
Date:   Mon May 22 23:53:41 2017 -0400

    ...
mikeyb@cern:~/src/git/hello$ git log data
fatal: ambiguous argument 'data': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git <command> [<revision>...] -- [<file>...]'
mikeyb@cern:~/src/git/hello$ 




History of files..renamed or not...
====================================
If we happen to check the history of
the file we just renamed....we may
find it a bit disturbing to see
that git apparently seems to 
lose the history of the original
data file and remembers only that it
renamed the file to it's current name


mikeyb@cern:~/src/git/hello$ git log -p file-B
commit 5d1510b06e25f6cda267a1d5e8908b2ad8a5d708
Author: adjunct_black <MichaelBrown172@Gmail.com>
Date:   Tue May 23 00:02:54 2017 -0400

    file-B

diff --git a/file-B b/file-B
new file mode 100644
index 0000000..2bb5b7e
--- /dev/null
+++ b/file-B
@@ -0,0 +1 @@
+file-A contents
mikeyb@cern:~/src/git/hello$


^^^^We can however "follow" the history of a file even after 
re-naming....


########Code#########
mikeyb@cern:~/src/git/hello$ git log --follow file-E
commit 8d0862cabbf00a664b0d0e006fd6fe089cd8d98f
Author: adjunct_black <MichaelBrown172@Gmail.com>
Date:   Tue May 23 00:19:01 2017 -0400

    file-E

commit 2ec3a235d0edac9323796d5289e0abefabe26129
Author: adjunct_black <MichaelBrown172@Gmail.com>
Date:   Tue May 23 00:17:27 2017 -0400

    file-D
mikeyb@cern:~/src/git/hello$ 
 







	> git rm

is the inverse of git add.  It
removes a file from both the
repository and the working directory.

Git will only remove a file only from
the index or from the index and 
working directory simultaneously.
Git will not remove a file just
from teh working directory; the
regular "rm" command:

	git commit

may be used for that purpose.

Summary:
===============================
*	To get rid of an unstaged file
	just use:
		> rm -f somefile.txt

*	To get rid of an unstaged file
	just use:
		> rm -f somefile.txt

*	To get rid of a staged file then
	you need to remove the file from both the index and repo:
		> git rm -f somefile.txt


What if we want to unstage a file ?
=====================================
To convert a file from staged to
unstaged, use :

	> git rm -f --cached datfile.txt


What if we want to remove a file
that has been commited ?
=====================================
> git rm datfile.txt

^^^^Before Git removes a file, it
checks to make sure the version
of the file in the working directory
matches the latest version in the 
current branch(pointed to by HEAD ptr).  This verification precludes the accidental loss of any changes(due to your editing) that may have been made to the file.


Adding a file back
=================================
What if we have a file named
"dat.txt" that we have staged and 
commited...but now removed from
both our repo and branch using:

>	git rm -f dat.txt


lets add the file back
--------------------------
> git add dat.txt
fatal: pathspec 'dat.txt' did not match any files

Looks like we removed it from our
working copy...so let's grab it 
from our last commit

> git checkout HEAD -- data






causes it to automatically stage all
unstaged, tracked file changes including removals of tracked files
from the working copy before it 
performs the commit	

Note: git commit
---------------------------
So basically if you just
use "git commit -a"  or "git
commit --all" , then you 
you skip the manual staging
via  "git add".




git ls-files --stage
============================
we can use this command
to peer under the object store
"hood" and find the SHA1 
values for those staged
files:
###########code###############
mikeyb@cern:~/src/git/hello$ git ls-files --stage
100644 0487f44090ad950f61955271cf0a2d6c6a83ad9a 0	.gitignore
100644 e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 0	data
100644 ce013625030ba8dba906f756967f9e9ca394464a 0	subdir/hello.txt
100644 05cbc965f7555fd45ed507063fe2ea66c319c09d 0	subdir/rog.html
100644 e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 0	subdir1/file1
100644 e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 0	subdir2/file1
mikeyb@cern:~/src/git/hello$ 


Most of the day-to-day changes within your repo will likely be
simple edits.  After any edit
and before you commit your changes
run the command:

	>git add data.txt

to update the index with the 
absolute latest and greatest
version of your file.
If you do't you will 
have two different versions
of the file: one captured
in the object store and referenced
from the index, and the other in 
your working directory.


git hash-object data
===========================
We can get information about
some object in your object 
store:
########Code##############
>git hash-object data.txt


Note: Data Objects that havent
been staged.
==================================
They will be added to the repo
data store automatically.
For example:
#############Code################
> echo "data1" >> data1.txt
> echo "data2" >> data2.txt
> echo "data3" >> data3.txt

> git hash-object data*
e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
d760283f593557e4e4d39f4e0de7865c9021082d
98d81a2ec6f8a779c75bc247c33ec6369a02428d
b5c7e399c9bad0828a1e152fa190ca63b266cc8e


Note:  git add
=============================
Think of it as not adding files
to the index...as opposed to 
adding content.



