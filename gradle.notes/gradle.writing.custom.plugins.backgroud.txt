https://docs.gradle.org/current/dsl/org.gradle.api.Task.html

Plugin Backgrond....
================================================
Software projects typically have version numbers that are
expressed using three numbers seperated by periods

	*	<major-version>.<minor-version>.<patch/incremental-version>

As thie naming convention suggests, the major versions are generally
incremented for major feature changes that are usually not backward
compatible.

Minor versions are incremented when implementing minor features or major bug fixes

Patch/incremental versions are incrememted for minor bugs, text changes, etc.

This onvention follows the "Semantic Versioning 2.0.0" guidlines
described at:

    *   http://semver.org/


Build numbers
=================================================
During development, it is possible for development
teams to create multiple builds of the same source code and deploy
them for testing or sharing with other developers.

Some software teams follow the convention of appending this 
build number to the version:

    *   <major-verions>.<minor-version>.<patch/incremental-version>.<build-number>

    *   Examples:
        -   1.0.0.56
        -   3.3.9.25BLR48
        -   6.1.0-20151123154556
        
        
Where do we get build numbers from ?
============================================
Build numbers can be obtained froma  variety of sources--commit numbers
from source code check-ins or build timestampes or continous integeration(CI)
server-genereated numbers, and so o.  In this section, you will create
a Gradle plugin that generates random build numbers

       
Plugin Configuration
==============================================
To keep things manageable for the book, the build number plugin generates
two types of values:

    *   numeric : timestamp
    *   alphanumeric: ????
    
    
    /***code*****/
    
    apply plugin: 'build-number-plugin'
    buildNumber{
        numberType = 'alphanumeric'
        alphaNumLength = 5
    }


^^^This plugin provides a buildNumber configuration blaock that allows the plugin
user to set the build number type--alphanumeric or timestampe.  The user
can use the alphaNumLenth property to dictate the number of chartacters in the
generated alopha numer string.

Note:
=====================
There are already extant 3rd party Gradle plugins available for generating
build numbers from tother sources such as Git/SVN and provde more bells ans whistles.


Plugin Development
=====================================================================
*   This is will be a stand alone plugin project.
*   project layout:
    > mkdir -p  build_number_plugin/src/main/groovy/com/appress/gradle
    > mkdir -p  build_number_plugin/src/resources/META-INF/grale-plugins
    build-number-plugin
    |
    |
    |------build.gradle
    |------src
           |------main
                  |------groovy
                  |      |------com
                  |             |------appress
                  |                    |------gradle
                  |
                  |------resources
                         |--------META-INF
                                  |-------gradle-plugins
                        
*   our build.gradle file          
      
      
   /***code***/
   
   apply plugin:'groovy'
   group = 'com.apress.gradle'
   version = '1.0.0'
   
   dependencies{
        compile gradleApi()
   }                       
   uploadArchives{
        repositories{
            flatDir{dirs "../repo"}
        }
   }    
                  


^^^ Since this is a groovy project, you must geing the build.gradle
file by applying the Groovy plugin.  Gradle artifacts are identified using
three coordinates:

    *   The group indicating the organization resp[onsible for the project
    *   The name of the artifact
    *   The version of the artificat
    
In the build.gradle file , you use: 

    group='com.apress.gradle'
    version='1.0.0'
    
We haven't specified a name for the artifact..so gradle uses the name
of the project directory as the artifact name


The dependencies block includes a compile directive that provides
the external libraries and rameworks the plugin project requires for 
compilation and testing purposes.  In this case we use gradleApi() to
pull in Gradle API used by custom plugin and task classes.

Finally, you use the uploadArchives method to upload or publish the generated
plugin to a repository.  The flatDir method is configured to publish the
packaged plugin to arepo folder that exists at the ame level as 
the project ont he file system.



The code for this class can reside in one of the following three
locations:

	*	Build script
		-	The plugin source code can be directly embedded
			into the build script.  This approach limits the 
			reuse value of the plugin as the plugin is not visible outside
			the build script
	*	buildSrc project:
		-	Plugin code that resides under the buildSrc
			project is atuomatically compiled and is made available
			in the build script's classpath.  This plugin is also not
			visible outside the build and hence doesn't provide
			reuse outside the project
	*	Stand-alone project
		-	The plugin code can be bundled as a JAR file that can
			then be inclued in the build script's  classpath.  This 
			approach provides the highest reuse value but also requires
			sperate project and build infrastructure



Creating a Java Plugin
================================================
You'll begin your Hello Gradle Plugin development by creating
a buildSrc folder inside the helo-gradle folder:

Code  : Java Custom Plugin
-------------------------------------------------
> cd hello-gradle
hello-gradle> mkdir -p buildSrc/src/main/java
hello-gradle> sublime buildSrc/src/main/java/GreetAsk.java
hello-gradle> sublime buildSrc/src/main/java/GreetAsk.java
#The current directory tree should look like this for
#hello-gradle

#create a new task that sends "Hello Gradle Plugin" to standard out

//--------------Custom Task Code-----------------//

import org.gradle.api.DefaultTask ;
import org.gradle.api.tasks.TaskAction ;

public class GreetTask extends DefaultTask{
	@TaskAction
	public void greetAction(){
		System.out.println("Hello Gradle Plugin") ;
	}
}


//--------------Custom Plugin Code : HelloPlugin-----------------//

import org.gradle.api.Plugin ;
import org.gradle.api.Project ;

public class HelloPlugin extends DefaultTask{
	@Overide
	public void apply(Project project){
		project.getTasks().create("greet",GreetTask.class);
	}
}

Code  : Groovy Custom Plugin
-------------------------------------------------
> cd hello-gradle
hello-gradle> mkdir -p buildSrc/src/main/groovy
hello-gradle> sublime buildSrc/src/main/groovy/HelloPlugin2.groovy
hello-gradle> sublime buildSrc/src/main/groovy/GreetAsk.java
#The current directory tree should look like this for
#hello-gradle

#create a new task that sends "Hello Gradle Plugin" to standard out

//--------------Custom Task Code-----------------//

import org.gradle.api.DefaultTask ;
import org.gradle.api.tasks.TaskAction ;

public class GreetTask extends DefaultTask{
	@TaskAction
	public void greetAction(){
		System.out.println("Hello Gradle Plugin") ;
	}
}


//--------------Custom Plugin Code : HelloPlugin-----------------//

import org.gradle.api.Plugin ;
import org.gradle.api.Project ;

public class HelloPlugin extends DefaultTask{
	@Overide
	public void apply(Project project){
		project.getTasks().create("greet",GreetTask.class);
	}
}





Summary
========================================================

*   The steps required to write a custom plugin in Grails...
================================================================
    1.  create buildSrc directories and files(Java Plugin):
    -----------------------------------------
    > mkdir -p buildSrc/src/main/java
    > touch  buildSrc/src/main/java/Task.java
    > touch  buildSrc/src/main/java/PluginJ.java
    > vim    buildSrc/src/main/java/Task.java  
    /*** code ***/
    import org.gradle.api.DefaultTask ;
    import org.gradle.api.TaskAction ;
    public class TaskClass extends Default Task{
        public void TaskMethod_0{
            System.out.println("executing task-0") ;
        }
        public void TaskMethod_1{
            System.out.println("executing task-1") ;
        }
        public void TaskMethod_2{
             System.out.println("executing task-2") ;
        }
    }
     > vim  buildSrc/src/main/java/PluginJ.java
    /*** code ***/
    import org.gradle.api.Plugin ;
    import org.gradle.api.Project ;
    import java.util.Map ;
    import javas.util.HashMap ;

    public class HelloPlugin extends DefaultTask{
	    @Overide
	    public void apply(Project project){
		    project.getTasks().create("task-0",TaskMethod_0.class);
		    project.getTasks().create("task-1",TaskMethod_1.class);
		    project.getTasks().create("task-2",TaskMethod_.class);
	    }
    } 
     
     
     
     
*   The steps required to write a custom plugin (Groovy)...
================================================================
    1.  create buildSrc directories and files(Java Plugin):
    -----------------------------------------
    > mkdir -p buildSrc/src/main/groovy
    > vim  buildSrc/src/main/java/PluginClass.java
    
     /*** code ***/
     import org.gradle.api.Plugin ;
     import org.;gradle.api.Project ;
     
     class PluginG implements Plugin<Project>{
         public void apply(Project project){
		    project.task("task-0");
		    project.task("task-1");
		    project.task("task-2");
	    }
     }

