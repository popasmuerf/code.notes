https://docs.gradle.org/current/dsl/org.gradle.api.Task.html

Projects and Plugins
================================================
Gradle provides a standardized project structure for domains such as Java,Scala,
and Groovy.  It takes a build-by-convention approach and provides 
recommendations on where different parts of the project should reside.
For example Gradle suggests that all of th Java soucrce code should be placed in
the folder:
	src/main/java 
and all the test code should reside in the folder:
	src/test/java
This standardization makes it easy for developers to jump from one project
to another.  This chapter covers Gradle's build-by-convention features for Java
projects.

Gradle follows a plugin-based architecture that makes it easy to agument
customize its functionality.  It provides serveral out-of-the-box plugins that make it easy to 
build Java projects.  Gradle also makes it easy to create 
custom plugins that can be shared with other developers.  


Plugins in Gradle encapsulate reusable:

	*	build
	*	task
	*	configuration

, logic.  Using plugins, it is possible to add new:

	*	new tasks
	*	new DSL elements
	*	sensible defaults

..andthus extend Gradle's functionality


Projects Plugins come in two types....
================================================
Gradle build scripts may include other build scripts
	*	Script Plugins :
		-	Script plugins provide an easy way to modularize common
			build logic
		-	script plugins may also reside on remote servers.

	*	Binary Plugins:
		-	Binary plugins encapsulate reusable build logic in classes that implement interface:
			*	org.gradle.api.Plugin<T>
		-	Binary plugins are usually bundled into jar files but can also reside a build
			sctipt or inside or inside the pojrect under the folder:
				*	buildSrc
				*	binary plugins makes use of a "plugin_id"
				*	plugin_in is the unique identifier for the given plugin.
				*	Gradle provided plugins have the short names such as java or groovy, 
				*	Community plugins typically use the fully quailifed names such as:
					-	org.hibernate.gradle.tools

	*	Execution phase:
		-	In this section, Gradle identifies the tasks that need to be ececuted and runs them in the right
			order



Example code for including another script as a plugin to main build script
both local and remote:
=============================================================================
/*************  (local) code for including other build scripts in your main build script *************/

	apply from: 'resuable-build.gradle'


/*************  (remote) code for including other build scripts in your main build script *************/

	apply plugin: 'http://remote_server.com/plugin_path/plugin_name'



Example code for using binary plugins:
=============================================================================
	apply from: 'resuable-build.gradle'







//************* code *************//

	task noActionTask{
		description = "A task with no actions"
		println "I am in the configuration block of $name"
	}

	task withActionTask{
		println "I am in the configuration block of $name"
		dolast{
			println "performing an action in $name"
		}
	}


During the configuration phase, Gradle executtes the code specified directly in
the task's closure.  Once the configuration phase is complete, Gradle executes the
actions inside :

	doFirst
	doLast

in the execution phase.  For example, running a command to list all
tasks would execute intialization and
configuration phases to produce the following output:

\chapter4> gradle -q -b build-phases.gradle tasks


Summary
========================================================
In this chapter, you learned about project and tasks, the two buildin blocks
of Gradle builds.  You learned that a task can contain one or more actions that are 
defined inside :
	doFirst
		-and-
	doLast

We are now aware  of the techniques 

	ifOnly(action){}
		-and-
	task.enabled = true

used for the purpose of exectuing or skipping tasks.
We also reviewed the three build phases of a Gradle build




//*******************Code*******************//
defaultTasks taskD, taskE
taskA{
	doFirst(action){
		//....
	}
	doLast(action){
		//....
	}
}
taskB{
	doFirst(action){
		//....
	}
	doLast(action){
		//....
	}
}
taskC{
doFirst(action){
		//....
	}
	doLast(action){
		//....
	}
}
taskD{
	onlyIf(action){
		//....
	}
	doFirst(action){
		//....
	}
	doLast(action){
		//....
	}
}
taskF{
	doFirst(action){
		//....
	}
	doLast(action){
		//....
	}
	if("a" == "b"){
		taskE.enabled = false
	}
}


taskA.dependsOn(taskB)
taskB.dependsOn(taskC)
