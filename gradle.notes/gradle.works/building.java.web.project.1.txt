https://docs.gradle.org/current/userguide/multi_project_builds.html
https://rominirani.com/gradle-tutorial-part-4-java-web-applications-9f4225cc02e5#.hocjrgs1g


Gradle Tutorial : Part 4 : Java Web Applications
==================================================
In this part of the tutorial, we shall look at building 
Java Web Applications via Gradle.  As is teh pattern, we shall have multi-projectd scenario wher we will have one
Java project that has some utility class  and 
which is built separately.  And then we have a 
Java Web Project that is dependent on this project
and has JSP/Servlets and so on.

In the process of which...we ahsll look at 2 additional plugins that Gradle provides, which will make our
task easier.  The plugins are:

1.      War plugin:  this plugin allows us to compile
        and assemble a WAR(Web appliation Archive) file
        from our Java Web Application.

2.      Jetty Plugin:  This plugin allows us to run our web
        application inside of a a Jetty container.  Very
        useful to test out the project quickly

Project Scenario
==============================================================
for this episode, we shall look at 2 projects that are
arranged under a common directory.  Our root directoryh is going to be called "mywebapp" and inside
of that we shall have 2 folders that will contain individual
projects as shown below:

mywebapp
|-utils
|-web


1. Utils:  This project contains some utility code and 
   hence it will not depend on any of the other projects.
   The java code in this project depends on an
   external java Date Time Library: Joda Time.  
   So we will need to hae that dependency defined
   for this project.
2  web: This is the java Web application project, that just
   has simple servlet and jsp files, along with the web.xml
   file.  This project depends  on teh utils project
   since it uses the utility java class from there.
   Along with that dependency, it also has dependency on the
   servlet Jar file that is needed to complile Java
   HTTP servlet code 


Multiple Gradle files
==================================================
Our directory will be called javaprojects and insided of
that we have 3 folders that willhouse the indivicual projects as shown
below:

javaprojects
|- api
|- common
|- app

Common
---------------------------------------------
This project contains some utility code and hence
it will not depend on any of the orther projects.
Do not that this does not mean that common
does not have dependencies on exteranl libraries
for compilation.  So that concept that we saw in 
the earlier chapter still remains.  It may depdn on
3rd party JARS.


Api
-----------------------------------------------
This project contains the application codea and
it depends on api and common
projects respectively

App
-----------------------------------------------
This project contains the application code
and it depends on api and common projects
respectively

Including Multiple Projects in a Build(edit settings.gradle)
====================================================
include ":api",":common",":app"

Common Configuration
======================================================
You are familiar with the build.gradle file, which is what
the Gradle command looks for in terms of what
it has to do.

Below is a a recommended and fairly intuitive structures
for the build.gradle file as shown below:
======================================================
allprojects{
        //global project build instructions
}
subprojects{
        //individual project build instructions
}


Including multiple projects in a build
======================================================

Declaring the java gradle plugins
========================================================
        *       apply plugin: "java"


Apply the java gradle plugin and then 
run the following command to view default tasks
provided via the java gradle plugin
===========================================================
Build tasks
-----------
assemble - Assembles the outputs of this project.
build - Assembles and tests this project.
buildDependents - Assembles and tests this project and all projects that depend on it.
buildNeeded - Assembles and tests this project and all projects it depends on.
classes - Assembles main classes.
clean - Deletes the build directory.
jar - Assembles a jar archive containing the main classes.
testClasses - Assembles test classes.



Ok...so there are more than a few tasks provided by the 
java plugin.....here are two that are fairly intuitive
========================================================
        *       clean
                -       will delete a build directory
                        such that all your classes will
                        be removed for a fresh compile

        *       assemble
                -       will create an archive (JAR) file
                        from your Java project and will run
                        all other tasks that require 
                        compile, test and so on.


Structure for you java code and java test classes
========================================================
src/main/java                   Production Java source
src/main/resources              Production resources
src/test/java                   Test Java sources
src/test/resources              Test resources



We can set the name and the version numbers of our 
assembled 
archives via declaring the following in the
the build.gradle file
=============================================
apply plugin: "java"
archivesBaseName = "qoute"


The beginning of Dependencies
=============================================
We have to tackle this soonr  or later




version = '1.0-FINAL'






 



//https://rominirani.com/gradle-tutorial-part-2-java-projects-5aaf99368018#.9f3kheusr
/**
    java plugin
    --------------
        -compilation
        -testing
        -bundling (a JAR in most cases)
        
        1. api depends on common
        2. app depends on api and common
        
    We can have one build file at the root of the project
    or we can have a build file in each sub root for each corresponding
    root directory...    
    We can have a seperate build file for each sub project
    -----------------------------------------------------------
    /javaprojects
        |- /api
             |- build.gradle
             |- (Java Sources and files)
        |- /common
             |- build.gradle
             |- (Java Sources and files)
        |- /app
             |- build.gradle
             |- (Java Sources and files)
        |- settings.gradle
        |- build.gradle
        
        
*/




Example of centralized gradle build config (gradle.build)
in root of project folder
=============================================================
apply plugin: "java"
archivesBaseName = "qoute"
version = '1.0-FINAL'
repositories {
  mavenCentral()
}



allprojects {
        task hello << { task -> println "I'm $task.project.name" }
}

subprojects {
  apply plugin: "java"
  repositories {
      mavenCentral()
  }
        dependencies {
                testCompile group: 'junit', name: 'junit', version: '4.+'
        }
}


project(':common'){
    dependencies {
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    }    
}
project(':api'){
     dependencies {
        compile project(':common')
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
        compile 'org.apache.logging.log4j:log4j-core:2.6.2'
    }    
}
project(':app'){
        dependencies{
                compile project(':common'), project(':api')
                compile 'org.apache.logging.log4j:log4j-core:2.6.2'
        }
}



Running granular tasks and builds 
============================================
Examples of running the hello task individually
for each project
-------------------------------------------------
> gradle -q api:hello
> gradle -q common:hello
> gradle api:build
> gradle common:hello



Running tasks specific to a build as opposed
to global settings for all subprojects
==============================================
project(':api'){....}
project(':common'){....}
project(':app'){....}

Configuring sub-project interdependency
==============================================
project(':app'){
        dependencies{
                compile project(':common')
                compile project(':api')
        }
}


Should sub-projects use a centralized build.gradle file
or their own build.gradle files...or both ?
====================================================
The question that you should be asking at this point...
is whether it is thje right approach to crate a single
large build.gradle file in teh root folder that
will:
        *       Apply common code within the subproject's
                closure
        *       Contain individual project(':project_name') 
                closures for tasks specific to that
                project, its own dependencies, etc.

We have an example of one such build.gradle file in teh prevous example...but it is generally not good practice
to rely on one centralized build.gradle file.  Best practice
dictates that all sub projects possess their own build files
(setting files also ?) at their directory roots.  This makes
things more concise and maintainable....
This is what our directory structure would look for the 
complete project should we modularize our project build files:

/javaprojects
|- /api
     |- build.gradle
     |- (Java Sources and files)
|- /common
     |- build.gradle
     |- (Java Sources and files)
|- /app
     |- build.gradle
     |- (Java Sources and files)
|- settings.gradle
|- build.gradle


^^^    Notice how at the root, we will continue to have the 
settings.gradle file in one place....as a global build.gradle file.  Gradle still requires a bit of global
meta-data to do it's job....which makes complete sense.
We can now expect our global build file to be much less
cluttered and concise as it will only contain the base build
info that we need for the entire project....whereas all
the build details particular/unique to individual sub projects is declared in their coressponding build files.


For example....in this context...this is all we need 
in our globalo build file....
----------------------------------------------------------

subprojects {
apply plugin: "java"
 
  repositories {
    mavenCentral()
  }
dependencies {
     testCompile "junit:junit:4+"
  }
}


...and all the stuff that we need to build our sub-projects
is contained below
------------------------------------------------------------


//build.gradle for app project
dependencies {
      compile project(':common'), project(':api')
      compile 'org.apache.logging.log4j:log4j-core:2.6.2'
}
//build.gradle for api project
dependencies {
      compile project(':common')
      compile 'org.apache.commons:commons-lang3:3.4'
      compile 'org.apache.logging.log4j:log4j-core:2.6.2'
   }
//build.gradle for common project
dependencies {
    compile 'org.apache.commons:commons-lang3:3.4'
  }





