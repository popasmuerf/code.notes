Bootstrap Phase
=====================
The bootstrap phase is the first phase of the 
AngularjSlife cycle and occurs when the
AngularJS JavaScript library is downloaded to the 
cloient's browser.  Once the JavaScript
library is downloaded, AngularJS initializes
its own components and initializes the applications's
module, which the ng-app directive points to.
The static DOM in this phase is loaded into the browser.





Compilation Phase
==================
The HTML compilation stage is the second
phase in the AngularJS life cycle. In this phase, 
the loaded static DOM is replaced with the
dynamic DOM to represent the AngularJS view.

Then these DOMs get linked to the appropiate
JavaScript function from the AngularJS built-in 

library or custom directive code


Runtime DataBinding Phase
=========================
This is the final stage of the AngularJS life
cycle, which exists as long as the user does not
reload or navigage awway from a web page.
In this phase, any changes made to the scope reflect
in the view and vice versa





Angular JS Architecture Concepts
===================================
1. HTML document is loaded into browser
2. HTML document is evaluated by the browser
3. JavaScript is loaded(Angular code) by the browser
4. Angular global object is created
5. JavaScript registers and executes controller functions 
6. JavaScript scans HTML for Angular apps and views and finds
   a controller function corresponding to the view.
7. JavaScript executes the controller functions and updates the views
   with data from the model populated by the controller

8. Angular listens for browser events
9. AngularJS update the view accordingly


AngularJS contains a standard module
======================================
...which contains a module that acts a container
for different types of applications such as views, 
controllers, directives, services, and so on...

modules specifies how an application can be bootstrapped.

config components...get his..is where you configure the 
specifics for your module


Built in Angular directives and services:
=======================================
*	ng-view
*	ng-controller
*	$http
*	$route
*	$window
*	$location


$scope object
=========================================
The ajs model contains the $scope object
that is used to store the application model,
so there is no need to create a js script model
class like with other js client-side frameworks.
Scopes are attached to the DOM, helping to simplify
the js problem considerably



Adding AJS to Spring Boot
================================
*	Include Angular scrits from the Google CDN
*	Download and host Angular files locally
*	Provide dependency information for AngularJS inthe 
	Spring Boot Application's pom.xml(I am not using maven...cause fuck that)


CDN
----------------------------------
*	point your HTML <script> tag to 
	a Google CDN URL.
*	Two types of Angular script URLs are available, one for
	production and other other for development

	-	angular.min.js
		*	minified version that should be used in prod
	-	angular.js
		*	non-minified, human-readble version that should be
			used in web development


	//example pointing to minified version
	<!doctype html>
	<html ng-app>
		<head>
			<title>Angular Application</title>
			<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1/5/6/angular.min.js">
			</script>
		</head>
		<body>
		</body>
	</html>



Download yourself...meh..
-------------------------
...meh...


include in your build file
----------------------------------

gradle:

// https://mvnrepository.com/artifact/org.webjars/angularjs
compile group: 'org.webjars', name: 'angularjs', version: '1.4.9'

// https://mvnrepository.com/artifact/org.webjars/bootstrap
compile group: 'org.webjars', name: 'bootstrap', version: '3.3.6'


mvn:

	<!-- https://mvnrepository.com/artifact/org.webjars/angularjs -->
-->
<dependency>
    <groupId>org.webjars</groupId>
    <artifactId>angularjs</artifactId>
    <version>1.4.9</version>
</dependency>

<!-- https://mvnrepository.com/artifact/org.webjars/bootstrap -->
<dependency>
    <groupId>org.webjars</groupId>
    <artifactId>bootstrap</artifactId>
    <version>3.3.6</version>
</dependency>

