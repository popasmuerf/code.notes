


Observables in Angular
======================================================


What are observables in Angular ?
---------------------------------------------
Angular makes use of observables as an interface to handle a variety of
common asynch operations...for example....

	*	You can define custom events that send obsevable output data from a child
		to a parent component

	*	The HTTP module uses obsevables to handle AJAX requests and reponses

	*	The Router and Forms modeles use observables to listen for and respond to user
		input events....




Transmistting data between components
---------------------------------------------
Angular provides an EventEmitter class that is ued whn publishing values from a component
through the decorator:

	*	@Output()

Event Emitter extends the Subject:
	*	RxJS 
	*	The extended class is:
		-	EventEmitter
		-	EventEmitter extends RxJS via defining the 
			the emit() method so it can send 
			arbitray values.
		-	Whe you call emit()
			*	 itpasses the emitted value to the next() method
				 so it can send arbitrary values.

	*	Quick Summary:
			-	Obseverables use the EventEmitter interface.
			-	EventEmitter extends RxJS
			-	Subjects make user of EventEmitter.emit()
				to send signals to Observers
			-	Observers make use of the EventEmitter.next() method
				to recieve methods.


	Example of template markup where it's associated component listens for
	open and clse events....


	<zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>


	@Component(
		{selector:'zippy',
		 template:`
			<div class="zippy">
			<div (click)="toggle()">Toggle</div>
				<div>[hidden]="!visible">
					<ng-content></ng-content>
				</div>
			</div>

		 }`)


	export class ZippyComponent{
		visible = true ;
		@Output() open = new EventEmmiter<any>() ;
		@Output() close = new EventEmitter<any>() ;

		toggle(){
			this.visible = !this.visible ;
			if(this.visible){
				this.open.emit(null) ;
			}else{
				this.close.emit(null) ;
			}
		}

	}
