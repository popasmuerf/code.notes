http://www.tutorialspoint.com/spring/spring_bean_post_processors.htm


BeanPostProcessor
===================================
The interface :

	BeanPostProcessor

defines callback metods that you can implement to provide your 
instantiation logic, dependency-resolution logic etc.
You can also implement some custom logic after the
spring container finishes instantiating, configuring, and initializing
a bean by plugging in on one or more BeanPostProcessor 
implementations.

The BeanPostProcessor will execute for ALL instantiated beans.


Example of BeanPostProcessor stuff:
===================================
//HelloWorld POJO:

package com.tutorialspoint; 

public class HelloWorld{
	private String message ;
	public void setMessage(String message){
		this.message = message ;
	}
	public void getMessage(){
		System.out.println("Your message : " + message);
	}
	public void init(){
		System.out.println("Bean is going through init : " + message);
	}
	public void destroy(){
		System.out.println("B will be destroyed now")
	}

}

^^^ This is a very basic example of implementing BeanPostProcessor, which prints
a bean name  before and after initialization of any bean.  You can
implement more complex logic before and after instantiating a bean because
you have access on bean object inside both the post processor methods


//Implementation of our example BeanPostProcessor interface class
package com.tutorialspoint;


import org.springframework.beans.factory.config.BeanPostProcessor;
import org.springframework.beans.BeansException;
public class initHelloWorld implements BeanPostProcessor{
	@Override
	public Object postProcessAfterInitialization(Object bean, String beanName)
			throws BeansException {
		System.out.println("BeforeInitialization: " + beanName);
		return bean;
	}
	@Override
	public Object postProcessBeforeInitialization(Object bean , String beanName)
			throws BeansException {
		System.out.println("AfterInitialization: " + beanName);
		return bean;
	}
}


//Implementation of MainApp class
package com.tutorialspoint;

import org.springframework.context.support.AbstractApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class MainApp{
	public static void main(String[] args){
		AbstractApplictionContext context = context = new ClassPathXmlApplicationContext("Beans.xml");
		HelloWorld obj = (HelloWorld) context.getBean("helloWorldId");
		obj.getMessage() ;
		context.registerShutdownHook() ;
	}
}

//Beans.xml definition required for destroy methods:

<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

   <bean id="helloWorld" class="com.tutorialspoint.HelloWorld"
       init-method="init" destroy-method="destroy">
       <property name="message" value="Hello World!"/>
   </bean>

   <bean class="com.tutorialspoint.InitHelloWorld" />

</beans>

^^^
So aparentlly we don't have to call post before and after processing
methods.  The framework does it for us.  We just have to include this
expression attribute in XML bean definition:

<beans ....>
	<bean class="com.tutorialspoint.InitHelloWorld"/>
</beans>

