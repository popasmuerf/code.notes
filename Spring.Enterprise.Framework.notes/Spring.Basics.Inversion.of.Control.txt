http://www.tutorialspoint.com/spring/spring_environment_setup.htm

The IoC container:
==============================
Inversion of Control(IoC) is a principle that is also
known as dependency injection(DI).  It is a process
whereyby objects define their dependencies, that is, the other objects
they work with, only through constructor arguments, 
arguments to a factory method, or properties.

Basis of the IOC container:
=============================
packages:
	org.springframework.beans
	org.springframework.context


Core
+++++++++++++++++++++++++++
The Core module provides the fundamental parts of the 
framework, including the IoC and Dependency
injection features


What does the spring container do ?
+++++++++++++++++++++++++++++++
The Spring container is at the core of the Spring Framework.
The container will create the objects,
wire them together, configure them,
and then manager their complete lifecycle from 
creation till destruction.  The Spring container uses
Dependency Injection(DI) otherwise known as IoC(Inversion of Control) 

Where does the IoC container get's it's instructions ?
+++++++++++++++++++++++++++++++++
Spring apps...much like JEE can be set up via convention or configuration meta data:
	XML
	in code annotations
	in code

Rough diagram of how a spring app works w/r to configurations
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Java POJO classes_____
						|
						v
Metada---------------->The Spring Container
								|(final result)
								V
						Ready to use application

^^^Description of what's going on:
+++++++++++++++++++++++++++++++++++++
Spring BeanFactory Container:
-------------------------------------
The BeanFactory Container is the simplest 
container providing basic support for DI and 
defined by the inteface:

	org.springframework.beans.factory.BeanFactory

Related interaces are:
	BeanFactoryAware
	InitializingBean
	DisposableBean
are included for backwards compatibility with
a large number of third-party framewors that
integreate with Spring

Spring ApplicationContext Container
----------------------------------------
This container adds more enterprise-specific functionality
such as the ability to resolve textual messages from
a properties file and the ability to publish application events
to interesed event listeners.  This  container is defined by the  interface:

	org.springframework.context.ApplicationContext


Tip
===================================================
The application container:

	ApplicationContext

includes all the functionality of the container

	Beanfactory

so it is generally recommened over the BeanFactory.
BeanFactory can still be used for light weight applications
like mobile devices or applet based applications where dta volume and 
speed is significant.




