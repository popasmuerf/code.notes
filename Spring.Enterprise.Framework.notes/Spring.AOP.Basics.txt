http://www.tutorialspoint.com/spring/aop_with_spring.htm

Quick summary of Spring AOP:
=========================================================================
One of the key components of Spring Framework is the Aspect oriented programming
(AOP) framework.  Aspect Oriented Programming entails breaking down 
program logic into distinct parts called "concerns".  The fucntions that span multiple
points of an application are called cross-cutting concerns and  these
 concerns  are conceptually serparate from the application's business logic.
 There are various common good examples of aspects like logging, auditing, 
 declarative transasctions, security, and cahcing etc.

 The key unit of modularity in OOP is the class, whereas in AOP the unit of modularity
 is the aspect.  Dependency injection helps you decouple  your application objects from 
 each othe and AOP helps you decouple cross-cutting concerns from the objects
 that they affect.  AOP is like triggers in programming languages
 such as Perl(shit), .NET, Java and others.

 Spring AOP module provides interceptors to intercept an application, for
 example, when a module is executed, you can add extra functionality before or after the meothod
 execution.


AOP Terminologies
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
1.	Aspect
	A module which has a set of APIs providing cross-cutting requirements.
	For example, a logging module would be called AOP aspect for logging.  An
	application can have any number of aspects depending on the requirement
2.	Join Point
	This represents a point in your application where you can plug-in AOP aspect.
	You can also say, it is the actual place in the application where an action will be
	taken using Spring AOP framework.
3.  Advice:
	This is the actual action to be taken either before or after teh method
	execution.  This is atual piece of code that is invoked during progra
	execution by Spring AOP framework
4. 	Pointcut
	This is a set of one or more joinpoints where an advice should be executed.
	You can specify pointcuts using expressions or patterns as we will see in our
	AOP examples.
5.	Introductions
	introductions allows you add new methods or attributes to existing classes
6.	Target ojbect
	The object being advised by on e or more aspects, this object will always be
	a proxied object.  Also referred to as the advised object
7.  Weaving
	Weaving is the process  of linking aspects with other applicaiton types or
	objets to create an advised object.  This can be done at complie time, load time,
	or at runtime

8.

Types of Advice....
=============================================================================

Spring aspects can work with five kinds of advice mentioned below:

1. 	before
	Run advice before the a method execution
2.	after
	Run advice after the a method exectuion regardless of  its outcome
3.	after-returning
	Run advice after a method execution onl8 if method completes
4.	after-throwing
	Run advice after a method execution only if method exits by
	throwing an exception
5.	around
	Run advice before and afer the advised method is invoked


Types of Advice....
=========================================================================
Spring supports the 
	@AspectJ
annotation style approach and the schema-based approaced to implement
custom aspects.  These two approaches have been explained in detail in the 
following two sub chapters.

Approach	Description
XML Schema based	Aspects are implemented using regular classes along with XML based configuration.
@AspectJ based	@AspectJ refers to a style of declaring aspects as regular Java classes annotated with Java 5 annotations.
