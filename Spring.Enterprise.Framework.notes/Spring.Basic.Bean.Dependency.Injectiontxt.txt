http://www.tutorialspoint.com/spring/spring_bean_post_processors.htm


Bean Dependency Injection
===================================
Every java based application has a few objects that work together
to present what the end-user sees as a working application.

When writing a complex Java application,  application classes should
be as independent as possible of other java  classes to increase the possibility
to reuse thee classes and to test them independently of other classes while
doing unit testing.  Dependency Injection (or sometime)

Dependency injection(or sometimes referred to as "wiring") helps in
gluing these classes together and same time keeping them independent.

Conscider you have an application shich hs a text editor component and you want to provide
spell checking.  Your standard code would look something like this:


public class TextEditor{
	private SpellChecker spellChecker;
	public TextEditor(){
		spellChecker = new SpellChecker() ;
	}
}


^^^there exists above a dependency of TextEditor on spellChecker.
An IoC scenario  we would instead do the the following:

public class TextEditor{
	private SpellChecker spellChecker;
	public TextEditor(SpellChecker spellChecker){
		this.spellChecker = spellChecker ;
	}
}

^^^^
Here, TextEditor should not worry a out SpellChecker implementation.
The SpellChecker will be implemented independently and will be provided
to TextEditor at the time of TextEditor instantiation and 
this entire procedure is controilled by the Spring Framework.

here, we have removed the total control from TextEditor and kept it
somewhere else(i.e. XMLconfgiration file) and the dependency(i.e. class SpellChecker)
is being injected into the class TextEditor through a ClassConstructor.
Thus flow of control has been "inverted" by Dependency Injection(DI) because you have
effectively delegated dependencies to some external system.

another option for DI is via setter methods of the TextEditor class where we will
create SpellChecker instance and this instance will be used to call setter methods to
initialize TextEditor's properties.


Thus, DI exists in two major variants and following two sub-chapters will cover
both of them with examples:


S.N. Dependency Injection type And description
++++++++++++++++++++++++++++++++++++++++++++++++++++++
1. Constructor-based dependency injection Type & Description:
Constructor-based DI is accomplished when the container invokes a class constructor
with a number of arguments, each representing a dependency on another class


2.Setter-based dpenedency injection
Setter-based DI is accomplished by the container calling setter methods on your beans after invoking
a  no-argument constructor or no-argument static factory method to instantiate
your bean.




Why Dependency Injection (DI) ? :
======================================================
You can mix both, Constructor-based and Setter-based DI but it is good rule of thumb
to use constructor arguments for mandatory dependencies and setters for optional dependencies.

Code is cleaner with the DI priniciple and decoupling is more effective when objects are provided with 
their dependencies.  the object does not look up its dependencies, and does not know the 
location or class of the dependencies rather everything is taken care by the Spring FrameWork

