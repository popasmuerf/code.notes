http://howtodoinjava.com/core-java/related-concepts/usage-of-class-sun-misc-unsafe/
http://howtodoinjava.com/core-java/related-concepts/usage-of-class-sun-misc-unsafe/
http://mishadoff.com/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/
Basics of Java's version of 
The Darkhold, The Shining Trapezohedron, The Book of Eternal Darkness...
De Vermis Mysteriis
=============================================================
sun.misc.Unsafe

First...what is Cloning in Java ?
===============================================
Cloning is a process of creating an exact copy of
an existing object memory.  In java, the method:

        java.lang.Object.clone() ;

is used in the cloning process.  This method
creates an exact copy of an object on which it is
called via field-by-field assignment and returns
the reference of that object.  Not allthe  objects
in java are eligible for the cloning process.  the objects
which implement Clonable interface are only
eligible for the cloning process. The Cloneable interface
is a mareker interface which is used to 
provide the marker to the cloning process

here are a few attributes of java.lang.Object.clone():
-------------------------------------------------------
        * it's non-static
        * it's public
        * used to clone or copy 
          a given object
        * Throws CloneNotSupportedException
        * signature:
                protected Object clone() throws CloneNotSupportedException
        * Objects targeted for cloning must have
          classes that implement interface:
                Clonable

Example Code of Shallow Copy(Default):
---------------------------------------------------------
class A implements Cloneable{
        int i ;
        int j;
        public A(int i, intj){
                this.i = i ;
                this.j = j ;
        }
        @override
        protected Object clone() throws CloneNotSupportedException{
                return super.clone() ;
        }

}

public class CloneMethodDemo{
        public static void method(String[] args){
              A a1 = new A(10,20) ;
              A a2 = null ;  
        }
        try{
                a2 = (A) a2.clone() ;
        }catch(CloneNotSupportedException e){
                System.out.println("Object is not clone-able");
        }
        System.out.println(a2.i);
        System.out.println(a2.j) ;
}


more info pertaining to the method:

        java.lang.Object.clone()




is availiable here :
--------------------------------------------------------
javaconceptoftheday.com/clone-method-java-lang-object-class/        


What exactly is Shallow Copy :
--------------------------------------------------------
If a cloned object and original objects are not
100% disjoint, then it is called shallow copy.
In a a shallow copy operation, any changes made to the
clone will be reflected in the original or
vice-versa.  This happens when an object has
reference variables as fields.

For example, in the below program Class B has reference
variable 'a' of type class A.  This will be pointing
to an object of type class A.  When you create a clone
'b2'  of object 'b1' of type Class B, taht clonw will
also have this reference variable pointing
to the same object.  Any changes you make to this object thorugh
clone will be refelcted in the original object(shallow)

What exactly is a Deep Copy:
--------------------------------------------------------
If a cloned object and original objects are 100% disjoint,
then it is called deep copy.   In deep
copy operation, any changes made to a cloned object will
not be reflected in the original object or vice-versa.
The Deep copy of an object will have an exact copy of
all the fields of the original object, just as a shallow
copy, But in addition, if the original object has any references
to other objects as fields, then the copy of those objects
are also created by calling the clone() method on them.
This means the cloned object and the original object will
be 100% disjoint.....meaning they have absolutely nothing in
common asside from being of the same type...

Example Code of Deep Copy
-----------------------------------------
class Course implements Cloneable{
        String subject1 ;
        String subject2 ;
        String subject3 ;
        public Course(String sub1,String sub2, String sub3){
                this.subject1 = sub1 ;
                this.subject2 = sub2 ;
                this.subject3 = sub3 ;
        }
        protected Object clone()throws CloneNotSupportedException{
                return super.clone();
        }
}
class Student implements Cloneable{
        int id ;
        String name ;
        Course course ;
        public Student(int id, String name ,Course course){
                this.id = id ;
                this.name = name ;
                this.course = course ;
        }
        protected Object clone()throws CloneNotSupportedException{
                Student student = (Student) super.clone();
                student.course = (Course) course.clone() ;
                return student ;
        }
}
public class DeepCoplyInJava{
        public static void main(String[] args){
                Course science = new Course("Physics","Chemistry","Biology");
                Student student1 = new Student(111,"John",science) ;
                Student student2 = null ;
        }
        try{
                student2  = (Student) student2.clone();
        }catch (CloneNotSupportedException e)
        {
            e.printStackTrace();
        }
}

Cloning using sun.misc.Unsafe
===========================================
If you try to create an instance of Unsafe
class, you will not be allowed
because of two reasons:

1. Unsafe class has private constructor
2. It also has static methods:
        *       getUnsafe()
3. Calling Unsafe.getUnsafe() will throw
   a security exception if not ran from 
   trusted code


Work arounds....
----------------------------------------------
Field f = Usafe.class.getDeclaredField("theUnsafe") ;
f.setAccessable(true) ;
Unsafe unsafe =(Unsafe) f.get(null) ;

Note: If you get an error from you IDE, then more than likely
you can ignore it.....



Usage of sun.misc.Unsafe
=======================================================
1.) Create an instance without any restriction
--------------------------------------------------------
Using the method:

        allocateInstance()

you can create an instance of a class without
invoking it's constructor code, initialization code,
various JVM security checks and all other low
level things.  Even if class has private constructor,
Even if a class has a private constructor, then also
you use this method to create a new instance:

Alert!!! Alert!!!: This is a real nightmare for Singleton
lovers....for obvious reasons....


Example of using sun.misc.Unsafe to instantiate 
an instance of the class 
---------------------------------------------------------
class Player{
        private int age = 12 ;
        public Player(){
                this.age = 50 ;
        }
        public int getAge(){
                return this.age;
        }
        public void setAge(int age){
                this.age = age ;
        }
}

public class UnsafeDemo{
        public static void main(String[] args)throws NoSuchFieldException eIllegalArgumentException,IllegalAccessException, InstantiationException{
        Field f = Unsafe.class.getDeclaredField("theUnsafe");
        f.setAccessisble(true);
        Unsafe unsafe = (Unsafe) f.get(null) ;
        Player p = (Player) unsafe.allocateInstance(Player.class) ;
        System.out.println(p.getAge());
        System.out.println(new Player().getAge());          
        }
}


Shallow clone using direct memory access
===============================================
How it's done ?
-------------------------------------------
Instead of bothering with implementing Cloneable
and encapsulating the call to java.lang.Object.clone(),

Having an implementation of calculating shallow object size, we can imply add function that copy objects.  Standard
solution need modify your code with Cloneable, or you 
can implement custom copy function in your object, hoewever it won't be multipurpose functionalit.

Example code for unsafe shallow copy
===================================================
static Object shallowCopy(Object obj){
        long size = sizeOf(obj) ;
        long start = toAddress(obj) ;
        long address = getUnsafe().allocateMemory(size) ;
        getUnsafe().copyMemory(start,address,size) ;
        return fromAddress(address) ;
}

Example code get address of object in memory
=====================================================
static long toAddress(Object obj){
        Object[] array = new Object[]{obj} ;
        long baseOffset = getUnsafe().arrayBaseOffset(Object[].class);


Example code get object from a location in memory
========================================================
static Object fromAddress(long address) {
    Object[] array = new Object[] {null};
    long baseOffset = getUnsafe().arrayBaseOffset(Object[].class);
    getUnsafe().putLong(array, baseOffset, address);
    return array[0];
}



