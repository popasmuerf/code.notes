Understanding sun.misc.Unsafe
https://dzone.com/articles/understanding-sunmiscunsafe
=================================================
The biggest competitor to the Java virutal machine
might be Microsoft's CLR that hosts languages
such as C#.  The CLR allows to write unsafe
code as an entry gate forlow level programming,
something that is hard to achieve on teh JVM.  If you need
such advanced functionality in Java, there is the JNI,
which requires  you to know some C and will
quickly lead to code  that is tightly coupled to a specific
platform. With:

        sun.misc.Unsafe

there is however another alternative to low-level programming
on the Java p;ltaform using a Java API, even though this
altrenative is discouraged.  Nevertheless, several applications
rely on  sun.misc.Unsafe such for example:

        *       objenesis
        *       kryo(Twitter Storm)
        *       Grails
        *       etc


Getting hold of an instance of sun.misc.Unsafe
===================================================
The sun.misc.Unsafe  cclass is intended to be 
oly used by core Java classes which is why its
authors mad its only constructor private and only
added an equally private singleton instance.  The public
getter for this instance peforms a security check in order to avoid
its public use:

import sun.misc.Unsafe ;
public static Unsafe getUnsafe(){
        Class cc = sun.reflect.Reflection.getCallerClass(2);
        if(cc.getClassLoader()!=null)throw new SecurityException("Unsafe"){
                return theUnsafe;
        }
}



This method first looks up the calling Class form the current
thread's method stack.  Tis lookup is implemented by another
internal class named:

        sun.reflection.Reflection

which is basically browsing down the given 
number of call stack frames and then returns this method's
defining class.

While browsing down the the stack...the first
found class(index 0) will 
obviously be the Reflection class itself, and
the second(index 1) class will be the Unsafe
class such that index 2 will hold your application class that 
was calling:

        Unsafe#getUnsafe()
--------------------------------------
        Stack   
**************************************
0       sun.reflect.Reflection.class
**************************************
1       Unsafe.class
************************************** 
2       MyApp.class
**************************************  



This is looked-up class is then checked for its
ClassLoader where a null reference is used
to represent the bootstrap class loader
on a Hotspot virtual machine(This is documented
in Class#getClassLoader() where it says that
:some implementations may use null to represent the
bootstrap class loader").     

This security check is poorly designed and shold
be seen as a warning against the singleton anti-pattern.


From the Unsafe class's source code, you can learn
that the singleton instance is stored in a private static field 
called the "theUnsafe"

public Unsafe{
        public Unsafe 

}
Quck Summary:
================================================

        

