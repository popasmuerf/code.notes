https://www.tutorialspoint.com/java8/java8_lambda_expressions.htm
https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executor.html

Before we start  -A1...
==========================================================
java.util.concurrent
    |
    |
    |----Executor
    
All known Subinterfaces:
    ExecutorService
    ScheduledExecutorService
    
All known Implementing Classes:
    AbstractExecutorService
    ForkJoinPool
    ScheduledThreadPoolExecutor
    ThreadPoolExecutor
 
    
public interface Executor
-----------------------------
An object that executes submitted Runnable tasks.
This interface provides a way of decoupling task
submission from the mechanics of how each
task will be run, including details
on thread use, scheduling, etc.  An Executor
is normally used instead of explicitly creating
threads.  for example, rath than invokingL

    Thread(new RunnableTask())).start()
    
    
    
for each of a set of tasks, you might othewise use:


    Executor executor = anExeccutor'
    executor.execute(new Runnable Task1())
    executor.execute(new Runnable Task2())
    executor.execute(new Runnable Task3())    
    
    














    
public interface Callable<V>

^^^^^A task that returns a result and may throw an exception.
Implementors define a single method with no arguments called:

    call()
    
The Callable interface is similar to:

    Runnable, in that both are designed for classes whose instances
    are potentially executed by another thread.  A Runnable class instance
    however  does not return a result and cannot throw a checked exception.
    
The Executors class contains utility methods to convert from other
common forms to Callable classes


Before we start  A...
==========================================================
java.util.concurrent
    |
    |
    |----Callable
    
    
public interface Callable<V>


java.util.concurrent.Callable has been introduced in JDK 5.  Callable
is a thread that returns the result.  There is
a method call() in Callable interface that must be overriden for 
computation tasks.

ExecutorService provides:
    *   invokeAll()
    *   submit()
    *   

Groovy closures are really just an implementaion of the functional
Callable inte4rface, implementing the "call" method.


def closure = {
    "called"
    
    assert closure instanceof java.util.concurrent.Callable
    assert closure() == "called"
}




Before we start  B...
==========================================================
In java, functional interfaces are just interfaces that describe
one and only one method.  functional interfaces are the basis
for lambdas in Java.

Groovy closures are really just an implementaion of the functional
Callable inte4rface, implementing the "call" method.


def closure = {
    "called"
    
    assert closure instanceof java.util.concurrent.Callable
    assert closure() == "called"
}



Java 8 Lambda expressions are characterized by the following syntax --
===========================================================================
parameter --> expression


Following are the important characteristics of a lambda expression --

*   Optional type declaratin -- No need to declare the type of
    a parameter as the compiler can infer the same from the
    value of the paramter
    
*   Optional parenthesis around parameter -- No need to declare a single
    paramter in parenthesis.  For multiple parameters, parentheses
    are required
    
*   Optional curly braces (single paramter only)

*   Optional return keyword -- The compiler autmatically returns
    the value if the oby has a single expression to return the
    value.  Curly braces are required to indidcate that expression returns
    a value.




Sample code using lambdas
==========================================================================
public class Java8Tester {
   public static void main(String args[]){
      Java8Tester tester = new Java8Tester();
		
      //with type declaration
      MathOperation addition = (int a, int b) -> a + b;
		
      //with out type declaration
      MathOperation subtraction = (a, b) -> a - b;
		
      //with return statement along with curly braces
      MathOperation multiplication = (int a, int b) -> { return a * b; };
		
      //without return statement and without curly braces
      MathOperation division = (int a, int b) -> a / b;
		
      System.out.println("10 + 5 = " + tester.operate(10, 5, addition));
      System.out.println("10 - 5 = " + tester.operate(10, 5, subtraction));
      System.out.println("10 x 5 = " + tester.operate(10, 5, multiplication));
      System.out.println("10 / 5 = " + tester.operate(10, 5, division));
		
      //with parenthesis
      GreetingService greetService1 = message ->
      System.out.println("Hello " + message);
		
      //without parenthesis
      GreetingService greetService2 = (message) ->
      System.out.println("Hello " + message);
		
      greetService1.sayMessage("Mahesh");
      greetService2.sayMessage("Suresh");
   }
	
   interface MathOperation {
      int operation(int a, int b);
   }
	
   interface GreetingService {
      void sayMessage(String message);
   }
	
   private int operate(int a, int b, MathOperation mathOperation){
      return mathOperation.operation(a, b);
   }
}



^^^^ A few things here.....
==================================================================================

    *   Contrary to what some people believe...an interface is in fact a type
    *   Apparently lambdas in Java are objects whom's classes are defined at run time
        and that they may be derived from other classes or types.....this is Java after all...
    *   The method contracts within the parent interface of the lambda expression is implemented
        within the implementation of the lambda expression as per the method contract

Scope:
==================================================================================
Using lambda expresssions, you can refer to final variable or effectively final
variable(which is assgined only once).  Lambda expressions throw a compliation error,
if a variable is assgned a value the second time.


Scope code example
===================================================================================
public class Java8Tester{
    final static String salutation = "Hello!";
    public static void main(String args[]){
        GreetingService greetService1 = message -> System.out.println(salutation + message);
        greetService1.sayMessage("Mahesh");
    }
    interface GreetingService{
        void saysMessage(String message); 
    }
}



Method References
===================================================================================
Method references help to point to methods by their names.  A method
refernece is described using "::" (double colon) symple.
A method reference can be used to point the following types of methods -

    *   static methods
    *   instance methods
    *   constructors using new operator(TreeSet::new)
    
  
Method reference Example
======================================================================================
Let's look into an example of method referncing to get a more
clear picture.  Write the following program
in an code editor and match the results....


//--------------Method Reference Example--------------------------------------
import java.util.List;
import java.util.ArrayList;

public class Java8Tester{
    public static void main(String[] args){
        List names = new ArrayList() ;
        names.add("Mahesh");
        names.add("Suresh");
        names.add("Ramesh");
        names.add("Naresh");
        names.add("Kalpesh");
	    names.forEach(System.out::println);
    }
}


^^^What's going on....
---------------------------------------------------------------------------
Here we pass a method reference of  Systeme.out.println() 
to the List.foreEach() method.  here 


Java 8 Functional Interfaces
===================================================================================
Functional interfaces have a single functionality to exhibit.
For example, a comparable interface with a single
method 'compareTo' is used for comparison purposes.  Java 8 has defined
a lot of functional interfaces to be used extensively in lambda expressions.
Following is the list of functional interfaces defined in 
java.util.Function package

    *   BiConsumer<T,U>
    *   BiFunction<T,U,R>
    *   BinaryOperator<T>
    *   BiPredicate<T,U>
    *   BooleanSupplier
    *   Consumer<T>
    
Just to name a few...
    
  
Feature: Functional Interface Predicate
======================================================================================
What is java.util.funtion.Predicate
------------------------------------
Predicate is anew functional inerface defined in java.util.function package
whcih can be used ina ll the contexts where an object needs to be evaluated
for a given test condition.

Since Predicate is a functional interface, hence it can be used as the
assignment target for a lambda expression or a method reference.


Advantage of predefined java.util.function.Predicate  -- Wherever an object
needs to be evaluated and a boolean value needs to be returned(or a boolean-valued Predicate exists -- in mathematical terms) the Predicate functonal interface can be used.  The user need
not define his/her own predicate-type functional interface.

Where -
    *   boolean test(T,t)  is the abstract method which will define the signature
        of the lambda express/method reference which cn be assigned to a target 
        of type Predicate
    *   T is the type of intput to the predicate
    *   boolean test(T t) returns true if the input argument matches the predicate
        (the test condition), othewise returns false
    *   there are 3 default methods and 1 static method in Predicate which
        I will explian in below sections of this tutorial


Source: java.util.function.Predicate 
===========================================================================
package java.util.function;
import java.util.Objects ;
@FunctionalInterface
public interface Predicate<T>{
    boolean test(T t) ;
    //rest of code goes here....
}

//--------------Test code for Predicate Interface--------------------------------------
import java.util.ArrayList ;
import java.util.Arrays ;
import java.util.List ;
import java.util.function.Predicate ;

public class PredicateFunctionExample{
    public static voic main(String[] args){
        Predicate positive = i -> i > 0 ;
        List integerList = Arrays.asList(new Integer(1), new Integer(2), new 
    }
}


