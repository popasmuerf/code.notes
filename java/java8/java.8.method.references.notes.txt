https://www.tutorialspoint.com/java8/java8_lambda_expressions.htm

Java 8 Lambda expressions are characterized by the following syntax --
===========================================================================
parameter --> expression


Following are the important characteristics of a lambda expression --

*   Optional type declaratin -- No need to declare the type of
    a parameter as the compiler can infer the same from the
    value of the paramter
    
*   Optional parenthesis around parameter -- No need to declare a single
    paramter in parenthesis.  For multiple parameters, parentheses
    are required
    
*   Optional curly braces (single paramter only)

*   Optional return keyword -- The compiler autmatically returns
    the value if the oby has a single expression to return the
    value.  Curly braces are required to indidcate that expression returns
    a value.




Sample code using lambdas
==========================================================================
public class Java8Tester {
   public static void main(String args[]){
      Java8Tester tester = new Java8Tester();
		
      //with type declaration
      MathOperation addition = (int a, int b) -> a + b;
		
      //with out type declaration
      MathOperation subtraction = (a, b) -> a - b;
		
      //with return statement along with curly braces
      MathOperation multiplication = (int a, int b) -> { return a * b; };
		
      //without return statement and without curly braces
      MathOperation division = (int a, int b) -> a / b;
		
      System.out.println("10 + 5 = " + tester.operate(10, 5, addition));
      System.out.println("10 - 5 = " + tester.operate(10, 5, subtraction));
      System.out.println("10 x 5 = " + tester.operate(10, 5, multiplication));
      System.out.println("10 / 5 = " + tester.operate(10, 5, division));
		
      //with parenthesis
      GreetingService greetService1 = message ->
      System.out.println("Hello " + message);
		
      //without parenthesis
      GreetingService greetService2 = (message) ->
      System.out.println("Hello " + message);
		
      greetService1.sayMessage("Mahesh");
      greetService2.sayMessage("Suresh");
   }
	
   interface MathOperation {
      int operation(int a, int b);
   }
	
   interface GreetingService {
      void sayMessage(String message);
   }
	
   private int operate(int a, int b, MathOperation mathOperation){
      return mathOperation.operation(a, b);
   }
}



^^^^ A few things here.....
==================================================================================

    *   Contrary to what some people believe...an interface is in fact a type
    *   Apparently lambdas in Java are objects whom's classes are defined at run time
        and that they may be derived from other classes or types.....this is Java after all...
    *   The method contracts within the parent interface of the lambda expression is implemented
        within the implementation of the lambda expression as per the method contract

Scope:
==================================================================================
Using lambda expresssions, you can refer to final variable or effectively final
variable(which is assgined only once).  Lambda expressions throw a compliation error,
if a variable is assgned a value the second time.


Scope code example
===================================================================================
public class Java8Tester{
    final static String salutation = "Hello!";
    public static void main(String args[]){
        GreetingService greetService1 = message -> System.out.println(salutation + message);
        greetService1.sayMessage("Mahesh");
    }
    interface GreetingService{
        void saysMessage(String message); 
    }
}



Method References
===================================================================================
Method references help to point to methods by their names.  A method
refernece is described using "::" (double colon) symple.
A method reference can be used to point the following types of methods -

    *   static methods
    *   instance methods
    *   constructors using new operator(TreeSet::new)
    
  
Method reference Example
======================================================================================
Let's look into an example of method referncing to get a more
clear picture.  Write the following program
in an code editor and match the results....


//--------------Method Reference Example--------------------------------------
import java.util.List;
import java.util.ArrayList;

public class Java8Tester{
    public static void main(String[] args){
        List names = new ArrayList() ;
        names.add("Mahesh");
        names.add("Suresh");
        names.add("Ramesh");
        names.add("Naresh");
        names.add("Kalpesh");
	    names.forEach(System.out::println);
    }
}


^^^What's going on....
---------------------------------------------------------------------------
Here we pass a method reference of  Systeme.out.println() 
to the List.foreEach() method.  here 




//https://rominirani.com/gradle-tutorial-part-2-java-projects-5aaf99368018#.9f3kheusr
/**
    java plugin
    --------------
        -compilation
        -testing
        -bundling (a JAR in most cases)
        
        1. api depends on common
        2. app depends on api and common
        
    We can have one build file at the root of the project
    or we can have a build file in each sub root for each corresponding
    root directory...    
    We can have a seperate build file for each sub project
    -----------------------------------------------------------
    /javaprojects
        |- /api
             |- build.gradle
             |- (Java Sources and files)
        |- /common
             |- build.gradle
             |- (Java Sources and files)
        |- /app
             |- build.gradle
             |- (Java Sources and files)
        |- settings.gradle
        |- build.gradle
        
        
*/

