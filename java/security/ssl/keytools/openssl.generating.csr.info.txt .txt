https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs/


OpenSSL Essentials
=================================================

OpenSSL is a versatile command line tool that can be 
used for alarge variety of tasks related to Public Key 
Infrastructure(PKI) and HTTPS(HTTP over TLS).  


Certificate  Sigining Requests
=====================================================
If you would like to obtain an SSL certificate from a
certificate authority(CA), you must first 
generate a certificate signing (CSR)

me ------->CSR(certificate signing request)
^					|
|					|
|					V
|-----SSL cert----Certificate Authority


What are the components of a CSR ?
------------------------------------

When we generate a CSR we will be prompted
to provide information regarding the
certificate:

	*	Distinguished Name(DN):
		- also contains:
			Common Name (CN):
				- The CN = Fully Qualified Domain Name(FQDNM)
	*	Information about your business or organization



Example of what the required/requested CSR information
prompt will look like:
-----------------------------------------------------------

---
Country Name (2 letter code) [AU]:US
State or Province Name (full name) [Some-State]:New York
Locality Name (eg, city) []:Brooklyn
Organization Name (eg, company) [Internet Widgits Pty Ltd]:Example Brooklyn Company
Organizational Unit Name (eg, section) []:Technology Division
Common Name (e.g. server FQDN or YOUR name) []:examplebrooklyn.com
Email Address []:


Example of generating a CSR from the CLI non-interactively
with information passed as arguments...
-----------------------------------------------------------
-subj "/C=US/ST=New York/L=Brooklyn/O=Example Brooklyn Company/CN=examplebrooklyn.com"


Generating OpenSSL CSRs
===========================================================
We can use OpenSSL commands that are related to 
generating:
	*	CSRs
	*	private keys(if they do not already exist)



Generating a Privatge Key and a CSR:
============================================
Use this method if you want to use:
	*	HTTPS(HTTP over TLS)
for doing stuff like securing Apache HTTP or
Ngninx web sever, and you want to use:
	*	Certificate Authority(CA) to issue
		the SSL certifcate

The CSR generated may be sent to your CA
to request the issuance of a:
	*	CA-signed SSL certifcate

If your CA supports SHA-2, add the
the flag : 
	*	-sha256

option to sign the CSR with SHA-2

Example: This command creates a 2048-bit private
key(domain.key) and a CSR(domain.csr) from 
scratch:
-----------------------------------------------
> openssl req \
	-newkey rsa:2048
	-nodes -keyout domain.key \
	-out domain.csr

^^^What's going on here ?
-----------------------------------------
*	-key :
	The -key option specfies an existing private key(domain.key)
	that will be used to generate a new CSR

*	-new :
	The -new option indicates that a CSR is being generated




Generate a CSR from an Existing Certfifcate and Private Key
==============================================================
Use this method if you want to renew an existing certifcate
but you or your CA do not have the original
CSR for some reason.  It bascially saves you the trouble
of re-entering the CSR information, as it extracts
that information from the existing certificate.

This command creates a new CSR(domain.crs)
based on an existing certificate(domain.crt) and 
private key(domain.key)


openssl x509 \
	-in domain.crt \
	-signkey domain.key \
	-x509toreq -out domain.csr


Side Note:...why do I need a signed ssl cert ?
------------------------------------------------
It basically is assurance to those connecting to 
your service that that no one else is in posession
of the private key required to de-encrypt your sesssions.

I guess you really don't need a signed ssl cert if all
traffic between nodes is 100% in-house

A great CSR issuer for small timers such as yourself
would be letsencrypt.com



Generating a self-signed SSL certificates
=======================================================
If you  would like to use an SSL certificate to secure
a service but you do not require a CA-signed
certificate, a valid (and free) solution is to sign
your own certificates.

Quick notes on self signed certs that
you need to know:
--------------------------------------
*	Self Signed Certs are signed with their
	own private key

*	Self-signed certs encrypt just as
	well as CA-signed certs...however users
	will be presented with a warning that
	the cert isn't trusted by your browser
	if you are using one.

*	Self-signed certs should hypothetically
	only if you do not need to prove your
	service's identity to its users:
		- non-public services
		- 


Generate a Self-Signed Certificate
========================================
Use this method if you want to use HTTPS(HTTP over TLS)
to secure your Apache HTTP or Nginx web
server,and you do  not require that your 
certificate is signed by a CA.

This command creates a 2048-bit private key
(domain.key) and self-signed certificate(domain.crt)
-------------------------------------------------------

> openssl req \
	-newkey rsa:2048
	-nodes -keyout domain.key \
	-x509 -days 365 -out domain.crt


^^^What's going here ?
--------------------------------------------------
	*	-x509:
		~	option tells "req" option to create a s
			self-signed certificate.
	*	-days 365:
		~	option specifies that the
			certificate will be valid
			for 365 days.
	*	A temporary CSR is generated to gather information
		to associate with the certificate




Generating a Self-Signed Certificate from an Existing Private
Key
========================================================
Use this method if you already have a private key that you would 
like to generate a self-signed certificate with it.

Example: This command creates a self-signed certificatge
(domain.crt) from an existing private key(domain.key)


> openssl req \
	-key domain.key \
	-new \
	-x509 -days 365 -out domain.crt

^^^What's going here ?
--------------------------------------------------
	*	-key:
		~	option tells 

	*	-x509:
		~	option tells "req" option to create a s
			self-signed certificate.
	*	-days 365:
		~	option specifies that the
			certificate will be valid
			for 365 days.
	*	A temporary CSR is generated to gather information
		to associate with the certificate



Generating a Self-Signed Certificate from an Existing Private
Key and CSR
========================================================
Use this method if you already have a private key that you would 
like to generate a self-signed certificate with it.

Example: This command creates a self-signed certificatge
(domain.crt) from an existing private key(domain.key)


> openssl req \
	-signkey domain.key \
	-in domain.csr \
	-x509 -days 365 -out domain.crt

^^^What's going here ?
--------------------------------------------------
	*	-key:
		~	option tells 

	*	-x509:
		~	option tells "req" option to create a s
			self-signed certificate.
	*	-days 365:
		~	option specifies that the
			certificate will be valid
			for 365 days.
	*	A temporary CSR is generated to gather information
		to associate with the certificate



View Certs
===========================================================
Certificate and CSR files are encoded in PEM
format, which is not readily human-readable.
We can view verify the contest of a CSR if we like...



View CSR entries
----------------------------------------------
This command allows you to view and verify the 
contents of CSR(domain.csr) in plain text

> openssl req -text -noout -verify -in domain.csr

domain.csr: No such file or directory
140736948409352:error:02001002:system library:fopen:No such file or directory:bss_file.c:406:fopen('domain.csr','r')
140736948409352:error:20074002:BIO routines:FILE_CTRL:system lib:bss_file.c:408:
Michaels-MacBook-Pro:code.notes mdb$ 




View certificate entries
----------------------------------------------
> openssl x509 -txt -noout -in domain.crt

Example:

Michaels-MacBook-Pro:code.notes mdb$ openssl x509 -text -noout -in /usr/local/lib/node_modules/npm/node_modules/node-gyp/test/fixtures/ca.crt
Certificate:
    Data:
        Version: 1 (0x0)
        Serial Number: 27066 (0x69ba)
    Signature Algorithm: sha256WithRSAEncryption
        Issuer: C=US, ST=CA, L=San Francisco, O=StrongLoop, Inc., OU=StrongOps, CN=ca.strongloop.com
        Validity
            Not Before: Dec  8 23:35:33 2015 GMT
            Not After : Apr 24 23:35:33 2043 GMT
        Subject: C=US, ST=CA, L=San Francisco, O=StrongLoop, Inc., OU=StrongOps, CN=ca.strongloop.com
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: (2048 bit)
                Modulus:
                    00:d7:e3:f3:a8:e4:be:f6:03:8c:70:60:8a:a5:a1:
                    93:d0:a3:f9:ba:a2:32:ad:cc:aa:75:74:08:13:b8:
                    8a:e2:b7:dc:5a:3a:5e:cb:04:1f:ec:95:75:79:48:
                    04:56:c5:7b:ab:7a:e7:93:1d:05:53:91:d9:27:e3:
                    ed:6a:8d:87:de:af:86:ee:8f:c8:31:e2:c1:c4:25:
                    4d:a8:8b:53:a9:e1:21:e7:75:27:85:af:96:f9:c9:
                    1c:59:a9:f1:66:ed:c7:90:20:2d:3e:14:62:ed:37:
                    7e:db:d7:12:5d:83:2e:2d:ef:85:22:f6:b5:13:35:
                    79:b5:c7:07:f2:8f:6d:15:a4:6f:6e:43:3d:7d:0f:
                    7e:83:87:a2:dd:df:d9:d8:0d:7b:6c:7a:92:9a:27:
                    7f:b1:3f:40:39:80:bb:7b:3b:36:59:1f:87:ea:f2:
                    0e:18:06:53:bc:28:71:71:21:5d:ba:6b:36:a4:6a:
                    38:63:68:c5:b5:e0:50:8f:bf:f5:70:f1:61:3f:fb:
                    1a:7e:4b:17:f7:cf:8e:d3:7e:68:1d:12:28:c9:d3:
                    b0:38:69:ad:59:59:89:ef:37:9a:5a:89:e3:a7:ce:
                    3a:b4:7e:be:bb:10:9a:2f:f5:9b:f4:da:76:b0:11:
                    b5:9a:08:13:10:bf:71:04:5d:54:cd:39:10:ae:2d:
                    51:af
                Exponent: 65537 (0x10001)
    Signature Algorithm: sha256WithRSAEncryption
         43:b9:39:5a:1c:a1:0d:32:06:60:23:73:46:7a:cc:1d:64:b3:
         1a:a6:b5:cb:8b:49:31:6d:3a:c1:a7:c9:35:1a:93:9b:57:2d:
         86:ad:62:6d:ce:87:7e:ae:5a:2b:5d:0a:d2:a3:1c:81:ab:91:
         4d:f4:35:31:6a:d5:09:35:bf:2a:72:75:be:48:62:4c:e1:fe:
         46:fc:5a:a4:69:fc:e2:04:9a:46:65:7a:29:97:a7:d3:e8:0c:
         b2:06:9e:28:41:9e:ff:71:e7:f8:f9:83:55:5f:8f:4d:a9:87:
         80:f0:02:7e:94:f0:c3:7f:16:1c:87:bf:ec:27:bd:80:77:c6:
         ec:c6:7c:70:a1:cd:66:10:f2:d0:80:18:3e:59:fe:61:1c:0c:
         2d:de:c9:35:07:df:1c:06:d6:6f:60:84:d6:67:1e:6b:81:ff:
         d7:65:3c:25:95:b9:b4:70:85:eb:2f:55:fb:b2:2e:0f:3a:b0:
         22:b2:ca:71:6d:e5:1b:5e:e7:55:41:ba:38:31:7f:47:2a:a7:
         dd:5e:57:f9:32:fd:d5:8c:97:8b:a7:37:e3:2d:f8:22:90:bb:
         31:00:d5:ff:ae:d4:ef:ee:41:a7:90:9f:78:33:d6:5b:6c:15:
Michaels-MacBook-Pro:code.notes mdb$ CRT=/usr/local/lib/node_modules/npm/node_modules/node-gyp/test/fixtures/ca.crt




We can do other things like view private keys...verify who certs are signed by by the
expected CA....etc...

We can creat private keys(domain.key)....to...

We can verify Private keys and then see if they match a certification and CSR

We can encrypt a private key...





