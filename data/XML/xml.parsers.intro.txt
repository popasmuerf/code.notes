http://www.tutorialspoint.com/java_xml/java_dom_parser.htm

XML Parser/ing notes
=====================================
The Document Object Model is an offical recommendation ofthe World Wide Web Consortium (W3C).
It defines an interface that enables programs to access and updae the style, structure, and contents
of XML documents.  XML parsers that support the DOM implement that interface.

When to use a DOM parser ?
=====================================
You should use a DOM parser when:

  * You need to know a lot about the structure of a document
  * You need to move parts of the document around (You ight want to sort certain elements, fore example)
  * You need to sue the information in the document more than once


What we get with a Java DOM parser...
=============================================================
When you parse an XML document with a DOM parser,you get back
a tree structure that contains all of the elements of your document.
The DOM provides a vareity of functions you can use to examine the contents
and structure of the document.

Advantages of using a DOM parser...
=============================================================
When you parse an XML document with a DOM parser, you get back a tree
structure that contains all of the elements of your document.  The DOM
provides a variety of function you can use to examine the contents and 
structure of the document.

The DOM is a common interface for manipulating document structures. One of its design goals is that Java code written for one DOM-compliant parser should run on any other DOM-compliant parser without changes.

DOM interfaces...
=============================================================
  * Node  - The base datatype of the DOM 
  * Element - The vast majority of the objects youll deal with are elements
  * Attr - represents an attribute of an element
  * text - The content of an element or and attribute
  * document - represents the entire XML document.  A Document object is often referred to as a DOM tree

Common DOM methods...
=============================================================
  * Document.getDocumentElement()  - Returns the root element of the document
  * Node.getFirstChild() - Returns the first child of a given Node
  * Node.getLastChild() - Returns the last child of a given Node
  * Node.getNextSibling() - These methods return the next sibling of a given node
  * Node.getPreviousSibling() - These methods return the previous sibling of a given Node
  * Node.getAttribute(attrName) - For a given Node, returns the attribute with the requested name

Steps to Using DOM ...
=============================================================
  * Import XML-related packages 
  * Create a DocumentBuilder 
  * Create a Document form a file or stream 
  * Extract the root element 
  * Examine attributes 
  * Examine sub-elements 

//------code : import XML-related packages-------------
  import org.w3c.dom.*;
  import javax.xml.parsers.*;
  import java.io.*;


The DOM is a common interface for manipulating document structures. One of its design goals is that Java code written for one DOM-compliant parser should run on any other DOM-compliant parser without changes.

XML schema interpretation
------------------------------------------------------
  * <xs:element name="note"> defines the element called "note"
  * <xs:complexType> the "note" element is a complex type
  * <xs:sequence> the complex type is a sequence of elements
  * <xs:element name="to" type="xs:string"> the element "to" is of type string (text)
  * <xs:element name="from" type="xs:string"> the element "from" is of type string
  * <xs:element name="heading" type="xs:string"> the element "heading" is of type string
  * <xs:element name="body" type="xs:string"> the element "body" is of type string

XML Schemas are More Powerful than DTD
======================================
  *   XML Schemas are written in XML
  *   XML Schemas are extensible to additions
  *   XML Schemas support data types
  *   XML Schemas support namespaces

When to Use a XML Schema
======================================
  *   With XML Schema, your XML files can carry a description of its own format
  *   With XML Schema, independent groups of people can agree on a standard for interchanging data
  *   With XML Scheam, you can verify data

XML Schemas use XML Syntax
======================================
  *   You don't have to learn a new language
  *   You can use your XML editor to edit your Schema files
  *   You can transform your Scheams with XSLT





http://www.w3schools.com/xml/xml_dtd.asp  
When not to Use a DTD/Schema
======================================
  *   XML does not require a DTD/Schema
  *   Whe you are experimenting with XML, or when you are working with small XML files, creating DTDs may be a waste of time.
  *   While developing software, you should wait until the specification is stable before you add a document definition.  It  is best to avoid validation errors.

http://www.w3schools.com/xml/xml_dtd.asp

Valid XML Documents
=====================================
An XML document with correct syntax is called "Well Formed".
An XML document valideated against a DTD is both "Well Formed" and "Valid"


Valid XML Documents?
======================================
A "Valid" XML document is "Well Formed" XML document, which also confors to the rules of a DTD.
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE note SYSTEM "Note.dtd">
<note>
<to>Tove</to>
<from>Jani</from>
<heading>Reminder</heading>
<body>Don't forget me this weekend!</body>
</note>

^^^^The DOCTYPE declaration , in the example ablve, is areference to an external DTD file.
The content of the file is shown in the paragraph below:

XML DTD
------------------------------------------------------
The purpose of a DTD is to define the structure of an XML document.  It defines the 
structure with a list of legal element:

<!DOCTYPE note
[
<!ELEMENT note (to,from,heading,body)>
<!ELEMENT to (#PCDATA)>
<!ELEMENT from (#PCDATA)>
<!ELEMENT heading (#PCDATA)>
<!ELEMENT body (#PCDATA)>
]>

^^^The DTD about is interpted like this:
The DTD above is interpreted like this:

!DOCTYPE note defines that the root element of the document is note
!ELEMENT note defines that the note element must contain the elements: "to, from, heading, body"
!ELEMENT to defines the to element to be of type "#PCDATA"
!ELEMENT from defines the from element to be of type "#PCDATA"
!ELEMENT heading defines the heading element to be of type "#PCDATA"
!ELEMENT body defines the body element to be of type "#PCDATA

NOTE:  #PCDATA
-----------------------------------------------------
#PCDATA means parse-able text data




When to Use a DTD/Schema
======================================
  *   With a DTD, independent groups of people can agree to suse a standard DTD for interchanging data
  *   With a DTD, you can verfiy that the data you recieve from the outside world is valid
  *   You can also use a DTD to verify your own data
  *   If you want to study DTD, please read the DTD tutoiral
When not to Use a DTD/Schema
======================================
  *   XML does not require a DTD/Schema
  *   Whe you are experimenting with XML, or when you are working with small XML files, creating DTDs may be a waste of time.
  *   While developing software, you should wait until the specification is stable before you add a document definition.  It  is best to avoid validation errors.



