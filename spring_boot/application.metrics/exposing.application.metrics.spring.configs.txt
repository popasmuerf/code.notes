Exposing Application Metrics and Information
==================================================
This is how we will monitor our application
(whether our service be of the micro-kind or
not..)

        *       how are things running ?

Let's freshen up our dependencies
==================================================
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-actuator</artifactId>
</dependency>



Externalize Configuration
====================================================
Binding helloapp.* to our HolaRestController
----------------------------------------------------
adding the annotation :

        @ConfigurationProperties(prefix="helloapp")

and Spring boot will autoamtically try to bind helloapp.foo
and helloapp.bar to Java Bean properties in the class

        HolaRestController 


Define a new property
-------------------------------------------
> vim src/main/resources/application.properties 

        helloapp.saying=Guten Tag aus


Refactor our controller code
------------------------------------------------
package com.example;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod ;
import java.net.InetAddress;
import java.net.UnknownHostException;
/**
        @RestContorller
        Tell Spring this is an HTTP controller
        capable of exposing HTTP endpoints
        (GET,POST,PUT,DELETE,etc)

        @RequestMapping
        Map specific parts of the HTTP URI
        path to classes, methods, and parameters
        in the Java code
*/
@RestController
@RequestMapping("/api")
@ConfigurationProperties(prefix="helloapp")
public class HolaRestController{
        private String saying ;
        @RequestMapping(method = RequestMethod.GET, value = "/hola", produces = "text/plain")
        public String hola()throws UnknownHostException{
                String hostname = null;
                try{
                        hostname = InetAddress.getLocalHost().getHostAddress();
                }catch(UnknownHostException e){
                        hostname = "unknown";
                }
                return saying +" " + Hola"+ " " + hostname;
        }
        @RequestMapping(method = RequestMethod.GET, value = "/bonjour", produces = "text/plain")
        public String bonjour()throws UnknownHostException{
                String hostname = null;
                try{
                        hostname = InetAddress.getLocalHost().getHostAddress();
                }catch(UnknownHostException e){
                        hostname = "unknown";
                }
                return saying + " " +  "BonJour Spring Boot de" + hostname;
        }
        public String getSaying(){
                return saying ;
        }
        public void setSaying(String saying){
                this.saying = saying;
        }
}



Note: application.properties
------------------------------------------
We could change the name of this file to:

        application.yaml

...and Spring will still recognize it
as a YAML file as the source of properties




Now what ?
-------------------------------------------
We can now exteranlize properties that would change
depending on the enviroment in which we are running.
things like service URIs, database URIs and passwords,
and message queue configurations would all be greate
candidates for external configuratin.
Do't overdo it though'; not everything needs
to change depending on the enviroment in which it runs!!!
Ideally an application would be configured exactly the same 
in all enviroments including timeouts, thread pools, retry thresholds, etc.







