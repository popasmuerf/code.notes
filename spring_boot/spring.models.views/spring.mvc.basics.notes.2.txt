https://www.baeldung.com/spring-mvc-model-model-map-model-view

Model
================================
Let's start with most basic concept here -- "The Model"
Simply put, the model can supply attributes used for
rendering views.


To provide a view with usable data, we simply add this data to
its Model object.  Additionally,
maps with attributes can be merged with Model instances.


@GetMapping("/showViewPage")
public String passParameterWithModel(Model model){
	Map<String,String>map = new HashMap<>();
	map.put("spring","mvc");
	model.addAttribute("message","Baeldung");
	model.mergeAttributes(map);
	return "viewPage";

}

/*
	take aways...
	Model.addAttribute("...")
	Model.mergeAttributes("...")
*/




ModelMap
================================
Just like the Model interface above, 
ModelMap is also used to pass values to
render a view.  The advantage of ModelMap
is it gives us te ability to pass a colletion 
of values and treat these values as if they were within
a Map

/*
	Take aways
*/


@GetMapping("/printViewPage")
public String passParametersWithModelmap(ModelMap map)
	map.addAttribute("welcomeMessage","welcome");
	map.addAttribute("message","Baeldung");
	return "veiwPage";



ModelandView
===================================
The final interface to pass values to a view is the Model
This interface allows us to pass all the information
equired by Spring MVC in one return.



@GetMapping("/goToViewPage")
pubic ModelandView passParametersWithModelAndView(){
	ModelAndView modelAndView = new ModelAndView("viewPage");
	modelAndView.addObject("message","Baeldung");
	return modelAndView ;



The View 
==================================================
All the data, we place within these models, is used by 
a view --  in general a templated view to 
render the web page.

If we have a Thymeleaf template file targeted byour controller's methods
s their iew.  A paramter passed through the model will b
accessable from within the thymeleaf HTML code:

<!DOCTYPE HTML>
<html xmlns:th="http://www.thymeleaf.org">
	<head>
		<title>Title</title>
	</head>
	<body>
		<div>Web Application. Passed parameter : th:test="${message}"</div>
	</body>
</html>




Part-II : Break down of the following code
=========================================================
/**
	Code for a controller
**/


package hello;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller
public class GreetingController {

    @GetMapping("/greeting")
    public String greeting(@RequestParam(name="name", required=false, defaultValue="World") String name, Model model) {
        model.addAttribute("name", name);
        return "greeting";
    }

}



Annotations
----------------------------------------------------------
	*	@Controller
		-	Designates the bean as a controller for request
			routers to look for

	*	@GetMapping
		-	method level Annotaton ensures that HTTP GET requests to
			/greeting are mapped to the greeting method


	*	@RequestParam
		-	name="name"
			*	binds the value of the query String parameter name
				into the name parameter of the greeting() method

			*	The value(or default value) is added to a Model object.

			*	The Model object and it's contents will be used by the 
				view technology to render content.

			* req params ---> controller uses params to create model --> view uses model


View technology
---------------------------------------------------------------
The implementation of the method body relies on a view technology, 
in this case Thymeleaf, to perform server-side rendering of the HTML.
Thymeleaf parses  the greetings.html  template below and evaluates teh 
expression "th:text" expression to render the value of the 
"${name" parameter that was set in the controller:


	/*
		maps the method variable:
			String name
		That holds the value of the req name param
		passed to the associated method...
		to the thymleaf attribute ${name} 
		in the associated view page
	*/

	....
		model.addAttribute("name",name)
	....


<!--src/main/resources/templates/greeting.html-->
<!DOCTYPE HTML>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Getting Started: Serving Web Content</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
</head>
<body>
    <p th:text="'Hello, ' + ${name} + '!'" />
</body>
</html>


NOTE...Spring boot can actually hot swap code just like
it's derivative Grails
==================================================
*	spring-boot-devtools
	-	Switches template engines to disable caching
	-	Enables LiveReload to refresh browser automatically
	-	Other reaonsble defaults based on development instead
		of production


















