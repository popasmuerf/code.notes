Our current mission if we choose to accept it...
======================================================
1.Using http://start.spring.io to create a 
bare bones Spring Boot projcet with Gradle support

2.Creating a simple app that looks for open issues in
multiple GitHub repositories

3.Supplying GitHub credentials using Boot's
uber easy property support

4.Learning how Boot finds templates

5. Adding mobile support using Spring Mobile and jQuery Mobile

6.Bundling up the application as a runnable JAR and deployingit to Cloud Foundry


7.Adding productin-redy support with Actuator and then 
writing a script to poll for usage metrics...



1. Creating an empty project with start.spring.io
========================================================
We enter some information, pick a set of desired options,
and then download either a build file or a zipped-up
project:

issue-manager
├── build.gradle
├── gradle
│   └── wrapper
│       ├── gradle-wrapper.jar
│       └── gradle-wrapper.properties
├── gradlew
├── gradlew.bat
└── src
    ├── main
    │   ├── java
    │   │   └── learning
    │   │       └── spring
    │   │           └── boot
    │   │               └── IssueManagerApplication.java
    │   └── resources
    │       ├── application.properties
    │       ├── static
    │       └── templates
    └── test
        └── java
            └── learning
                └── spring
                    └── boot
                        └── IssueManagerApplicationTests.java



Spring Boot starters
=================================================
Packages plugged in by start.spring.io are known
as "Spring Boot starters".  They are vitual packages
that deployed to Maven centeral.  Their job is to
pull in other dependencies while containing no code
of their own.

For example:

        spring-boot-starter-thymeleaf

pulls in the following dependencies:

        spring-boot-starter
        spring-boot-starter-web
        spring-core
        thymeleaf-spring4
        thymeleaf-layout-dialect






@Grab(grails_repo)
-----------------------
Grabs  jarred up repos we need...


Javascript libs
------------------------
*       webjars
        ------------------
        wraps up libs like jquery
        into jars and thus make it easy
        to grab from boot using Groovy's
        @Grab(js_repo)

*       bower.io
        -------------------
        Is industry standard for js repos
        for the clown-ass js world.
        Don't know how to integrate 


Static web pages may be be served from boot apps
from teh following paths:

*       /META-INF/resources
*       /resources/
*       /static/
*       /public/


bower.io
===========================================================
WebJars ins't the only opton when it comes to adding
JavaScript to our app.  More sophisticated UI developers
might ue Bower(http://bower.io), a popular JavaScript library
management tool.  WebJars are useful for Java developers, but
not every library has been bundled as a 
WebJar.  There is also a huge community of frontend developers more familiar with Bower and NodeJS that will
probably prefere using their standard tool chain to do
their jobs.

Crafting a Bower based app with Spring Boot
----------------------------------------------------------
We can craft a Bowser-based app with Spring Boot, we first
need to craft the file:

        .bowerrc

in the same folder we plan to create our Spring Boot CLI application.  Let's pic public/ as the folder of choice
for JavaScript modules and put it in this file, as shown
int the following code:

// .bowerrc
{
        "direcotry":"public/"

}

Boot can set this up for us...
=======================================
> bower init
{
  name: 'app_with_bower',
  authors: [
    'Mike Brown'
  ],
  description: 'Learning Spring Boot - bower sample',
  main: '',
  license: 'MIT',
  homepage: 'http://thirdplant.io',
  private: true,
  ignore: [
    '**/.*',
    'node_modules',
    'bower_components',
    'test',
    'tests',
    'public/'
  ],
  dependencies: {
    jquery: '^3.1.1'
  }
}


using Bower to install stuff
========================================
> bower install jquery --save
bower not-cached    https://github.com/jquery/jquery-dist.git#*
bower resolve       https://github.com/jquery/jquery-dist.git#*
bower download      https://github.com/jquery/jquery-dist/archive/3.1.1.tar.gz
bower extract       jquery#* archive.tar.gz
bower resolved      https://github.com/jquery/jquery-dist.git#3.1.1
bower install       jquery#3.1.1


Bower's configuration file takes the form of a JSOn file
=======================================================
public
|
|-------jquery
|-------MIT-LICENSE.txt
|-------bower.json
|-------dist
        |
        |------jquery.js
        |------jquery.min.js



What about an app that is all frontend with no backend ?
=========================================================
This is possible in this age of RESTful backends...where
our persistence layer is physically remote and whom's
data is retrieved using AJAX.





Understanding CORS
https://spring.io/understanding/CORS
==========================================


Boot and Ops stuff
==========================================
        *Spring's actuator module
        *CRaSH remote shell support

^^^^These two modules provide some slick,Ops-oriented features that are incredibly valuable in a production
enviroment.

//Sample code in Groovy

@Grab("spring-boot-actuator")
@Grab("spring-boot-starter-remote-shell")
@Grab("org.webjars:jquery:2.1.1")
@Grab("thymeleaf-spring4")
@Controller
class OpsReadApp{
        @RequestMapping("/")
        def home(@RequestParam(value="name",defaultValue="World",String n){
        new ModelAndView("modern").addObject("name",n)
        }

}


Actuator endpoints (returns json)
------------------------------------------------
/autoconfig
/beans
/configprops
/dump
/env
/health
/info
/metrics
/mappings
/trace


Efficiently consuming and processing  Actuator
endpoint information
-------------------------------------------------
http://projects.spring.io/spring-xd/


We should take care not to tax our app too much
while we are polling for actuator data...



CRaSH (http://www.crashub.org/1.3/reference.html)
============================================
> ssh -p 2000 user@localhost
