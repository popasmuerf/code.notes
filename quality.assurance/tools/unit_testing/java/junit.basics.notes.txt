The purpose of software tests
========================================
A software test is a piece of software
which executes another piee of software.
It validates if that code resutls in
the expected state(state testing) or
executes the expected sequence of
events (behavior testing)



Why are software tests helpful?
=================================
Software unit tests help the developer to'
verify that the logic of a piece of the 
program is correct.

Running tests automatically helps to identify
software regressions introduced by changes in the source code.  Having  high test coverage of your code
allows you to continue developing features whithout 
having to pedorm lots of manual tests.


Testing frameworks for Java
====================================
There are several testing frameworks
available for Java.  The most popular
ones are JUnit and TestNG



Testing terminology
======================================
1.1     Code or application under test
--------------------------------------
The code which is tested is typically called the 
"code under test".  I fyou are testing an
application, this is called the "application test"

1.2     Test fixture
--------------------------------------
A test fixture is a fixed state in code which
is tested used as input for a test.  Another
way to describe this is a test precondition

For example, a test fixture might be a 
fixed string, which is used as input for a method.
The test would validate if the method
behaves correctly with this input

1.3     Unit tests and unit testing
--------------------------------------
A unit test is a piece of code written by
a developer that executes a specific
functionality in the code to be tested
and asserts a certain behavior or state

The percentage of code which is tested by 
unit tests is typically called test coverge.

A unit test targets a small of code, e.g.,
a method or a class.  External dependencies
shoudl be removed from the unit tests, e.g,
by replacing the dependency with a test implementation
or a (mock) object created by a test framework.

Unit tests are not suitable for testing
complex user interface or component interaction.  For
this, you should develop integration tests.

1.4     Integration tests
--------------------------------------
An integration test aims to test the 
behavior of a component or the integration
between a set of components.  The term 
"functional test" is sometimes used as
synonym for integration test  Integration
tests check that the whole system 
works as intended, therefor they are reducing
the need for intensive manual tests



1.5     Performance tests
-----------------------------------------
Peformance tests are used to benchmark 
software componentns repeatedly.  Their
purpose is to ensure that the code under
test runs fast enough even if it's 
under high load.



1.6     Behavior vs. state testing
-----------------------------------------
A test is a behavior test(also called interaction test)
if it checks if certain methods were called with the
correct input paramters .  A behavior test does
not validate teh result of a method call.

State testing is about validating the result.
Behavior testing is about testing the
behavior of the application under test

If you are testing algorithms or system functionality
you will be focusing on system statye as opposed
to interactions.


1.7     What should be tested ?
------------------------------------------
        *       Ignore general/trival code
        *       Focus on code that thru experience
                where the most bugs manifest


The JUnit FrameWork
===============================================
JUnite in version 4.x is a test framework
which uses annotations to identify methods
that specify a test.  The main
websites for JUnit are the
JUnit homepage:

        http://junit.org

and GitHub project

        https://github.com/junit-team/junit



How to define a test in JUnit?
==============================================
A JUnit test is a method contained in a
class which is only used for testing.  This is called
a "Test class".  to write a JUnit 4 test you
annotate a  method with the annotation:

        @org.junit.Test

This method executes the code under test.

assert()
================================================
This method executes the code under test.
You use an assert() method, provided by
JUnit or another assert framework, to 
check an expected result versus the
actualresult.  These method calls code under
test.  You should provide meaningful messages
in asert statements.  That makes it
easier for the user to identify and fix the
problems.  This is especially true if
someone looks at the 
problem, who did not write the
code under test ofr the test code.



Example JUnit test
================================================
