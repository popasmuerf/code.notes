The purpose of software tests
========================================
A software test is a piece of software
which executes another piee of software.
It validates if that code resutls in
the expected state(state testing) or
executes the expected sequence of
events (behavior testing)



Why are software tests helpful?
=================================
Software unit tests help the developer to'
verify that the logic of a piece of the 
program is correct.

Running tests automatically helps to identify
software regressions introduced by changes in the source code.  Having  high test coverage of your code
allows you to continue developing features whithout 
having to pedorm lots of manual tests.


Testing frameworks for Java
====================================
There are several testing frameworks
available for Java.  The most popular
ones are JUnit and TestNG



Testing terminology
======================================
1.1     Code or application under test
--------------------------------------
The code which is tested is typically called the 
"code under test".  I fyou are testing an
application, this is called the "application test"

1.2     Test fixture
--------------------------------------
A test fixture is a fixed state in code which
is tested used as input for a test.  Another
way to describe this is a test precondition

For example, a test fixture might be a 
fixed string, which is used as input for a method.
The test would validate if the method
behaves correctly with this input

1.3     Unit tests and unit testing
--------------------------------------
A unit test is a piece of code written by
a developer that executes a specific
functionality in the code to be tested
and asserts a certain behavior or state

The percentage of code which is tested by 
unit tests is typically called test coverge.

A unit test targets a small of code, e.g.,
a method or a class.  External dependencies
shoudl be removed from the unit tests, e.g,
by replacing the dependency with a test implementation
or a (mock) object created by a test framework.

Unit tests are not suitable for testing
complex user interface or component interaction.  For
this, you should develop integration tests.

1.4     Integration tests
--------------------------------------
An integration test aims to test the 
behavior of a component or the integration
between a set of components.  The term 
"functional test" is sometimes used as
synonym for integration test  Integration
tests check that the whole system 
works as intended, therefor they are reducing
the need for intensive manual tests



1.5     Performance tests
-----------------------------------------
Peformance tests are used to benchmark 
software componentns repeatedly.  Their
purpose is to ensure that the code under
test runs fast enough even if it's 
under high load.



1.6     Behavior vs. state testing
-----------------------------------------
A test is a behavior test(also called interaction test)
if it checks if certain methods were called with the
correct input paramters .  A behavior test does
not validate teh result of a method call.

State testing is about validating the result.
Behavior testing is about testing the
behavior of the application under test

If you are testing algorithms or system functionality
you will be focusing on system statye as opposed
to interactions.


1.7     What should be tested ?
------------------------------------------
        *       Ignore general/trival code
        *       Focus on code that thru experience
                where the most bugs manifest


The JUnit FrameWork
===============================================
JUnite in version 4.x is a test framework
which uses annotations to identify methods
that specify a test.  The main
websites for JUnit are the
JUnit homepage:

        http://junit.org

and GitHub project

        https://github.com/junit-team/junit



How to define a test in JUnit?
==============================================
A JUnit test is a method contained in a
class which is only used for testing.  This is called
a "Test class".  to write a JUnit 4 test you
annotate a  method with the annotation:

        @org.junit.Test

This method executes the code under test.

assert()
================================================
This method executes the code under test.
You use an assert() method, provided by
JUnit or another assert framework, to 
check an expected result versus the
actualresult.  These method calls code under
test.  You should provide meaningful messages
in asert statements.  That makes it
easier for the user to identify and fix the
problems.  This is especially true if
someone looks at the 
problem, who did not write the
code under test ofr the test code.



Example JUnit test
================================================
The following coe shows a JUnit test.  This 
test assumes that the MyClass class exists
and has muyltiply(int,init) method.

//===============Test code==============//

import static
org.junit.Assert.assertEquals;
import org.junit.Test;

pulic class MyTests{
        @Test
        public void TestIfReturnZero(){
                MyClass tester = new MyClass();
                assertEquals("10 * 0 = 0",0,tester.mult(10,0));
                assertEquals("0 * 10 = 0",0,tester.mult(0,10));
                assertEquals("0 * 10 = 0",0,tester.mult(0,0));
        }
}

JUnit nameing conventions
========================================
There are several potential naming conventions
for JUnit tests.  A widely-used
solution is to add the suffix "-test"
to the names of the test classes and create them
in a ndew package "test"


As a general rule, a test name should explain what the
test does.  If that is done correctly, reading
the actual implementation can be avoided.

One possible convention is to use th eword "should"
in the test method name.  For example, "ordersShouldBeCreated"
or "menuShouldGetActive".  This gives a hint
what should happen if the test method is executed.


Maven's JUnit naming convention
===================================================
If you are using the Maven build system(Gradle follows Mavens build
conventions as much as possible) we should prefere teh 
"Test" suffix over "Tests".  The Maven build
systems(via it's surfire plugin)_ automatically
includes such classes in its test scope

JUnit test suits
==========================================================
If you have sveral test classes, you can
compbine them into a test suite.  Running
a test suite executes all test classes
in that suite in the specified order.  A test suite
can also contain other test suites.

The following example code demonstrates the usage of a
test suite.  It contains two test
classes(MyClassTest and MySecondClassTest).  If you want
to add another test class, you can add it to the statement:

        @Suite.SuiteClasses


//===============Code===================//
package com.brown.junit.first;
import org.junit.runner.RunWith ;
import org.junit.runners.Suite ;
import org.junit.runners.Suite.SuiteClasses ;


@RunWith(Suite.class)
@SuiteClasses({
                MyClassTest.class,
                MySecondClassTest.class
              })

public class AllTests{

}


Running tests from the command line
===================================================
You can also run your JUnit tests outside
your IDE  via standard Java code.  Build systems
like Apache Maven or Gradle in
combination with a Continuous Integration
Server (like Jenkins) can be used to execute
tests automatically on a regular basis.


Teh org.junit.runner.JUnitCore class provides
teh runClasses() method.  This method allows you
to run one or several tests classes.  As a return
parameter you recieve an object of th type

        org.junit.runner.Result

This object can bue used to retrive information about
the tests.


//==============Code==========================//

package md.mdb.junit.first ;

import org.junit.runner.JUnitCore ;
import org.junit.runner.Result ;
import org.junit.runner.notification.Failure ;

public class MyTestRunner{
        public static void main(String[] args){
                Result result = JUnitCore.runClasses(MyClassTest.class);
                for(Failure failure: result.getFailures()){
                        System.out.println(failure.toString());
                }
        }
}



^^^^This class can be executed like any other Java
program on the command line.  You only need to 
add the JUnite library JAR file to the classpath




