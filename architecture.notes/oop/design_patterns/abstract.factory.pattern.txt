http://www.tutorialspoint.com/design_pattern/abstract_factory_pattern.htm

Creational Patterns
=================================
Patterns for creating objects while hiding
the details of the creation process



public interface Shape{
	void draw() ;
}



public class Square implements Shape{
	@Override
	void draw(){
		System.out.println("Inside Square::draw() method.");
	}
}


public class Circle implements Shape{
	@Override
	public void draw() {
      System.out.println("Inside Circle::draw() method.");
   }
}


The Shape Factory
============================================
public class ShapeFactory{
	public Shape getShape(String shapeType){
		if(shapeType == null){
        	return null;
      }		
      if(shapeType.equalsIgnoreCase("CIRCLE")){
         return new Circle(); 
      } else if(shapeType.equalsIgnoreCase("RECTANGLE")){
         return new Rectangle();
      } else if(shapeType.equalsIgnoreCase("SQUARE")){
         return new Square();
      }
      return null;
   }
}

The Factory Pattern Demo
============================================

public class FactoryPatternDemo{
	public static void main(String[] args){
		ShapeFactory shapeFactory = new ShapeFactory() ;
		Shape shape1 = shapeFactory.getShape("CIRCLE");
		shape1.draw() ;
		Shape shape2 = shapeFactory.getShape("RECTANGLE");
		shape2.draw() ;
		Shape shape3 = shapeFactory.getShape("SQUARE");
		shape3.draw() ;
	}
}