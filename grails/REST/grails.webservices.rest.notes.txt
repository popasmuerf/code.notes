Mapping to REST resources
http://docs.grails.org/3.0.x/guide/single.html#restfulMappings
===================================================
Since Grails 2.3, it is possible to create 
RESTful URL mappings that map onto controllers
by convention.  The syntax to do so is as follows:

        "/books"(resources:'book')

You define a base URI and the name of the controller
to map t using the resources parameter.
The above mapping will result i nthe following
URLs:

HTTP Method     URI                     Grails Action
------------------------------------------------
GET             /books                  index
GET             /books/create           create
POST            /books                  save
GET             /books/${id}            show
GET             /books/${id}/edit       edit
PUT             /books/$/{id}/          update
DELETE          /books/${id}            delete



http://docs.grails.org/3.0.x/guide/webServices.html#REST

REST is not really a technology in itself,
but more an architectural pattern.  REST
is very simple and just involves using plain
XML or JSON as a "representational" or the 
underlying system, and HTTP 


Domain classes as REST resource
================================================
The easiest way to create a RESful 
API in Grails is to expose a domain class as
a REST resource via the transformation 
domain class:

import grails.rest.*
@Resource(ur='/books')
class Book{
        String title
        static constraints = {
                title blank:false
        }
}



^^^^Simply by adding the Resource transformation and specifying
a URI, your domain class will automatically be avaiable
as a REST resource in either XML or JSON format.  The transformation will
auto-magically register the necessary RESTful URL mapping and create
a controller called BookController.

You can try it out by adding some test datga to BootStrap.groovy:

        def init = {  servletContext ->
                new Book(title:"The Stand").save()
                new Book(title:"The Shining").save()
        }
     

We can hit up the URL for our resource endpoint in order to redner
the response like:


<?xml version="1.0" encoding="UTF-8"?>
<book id="1">
        <title>The Stand</title>
</book>


if we chanbge our url to

        http://localhost/myapp/books/1.jsons we get:

        {"id":1, "title":"The Stand"}



































































































































































































































































































































































































































































































































































































































































=============================================================


