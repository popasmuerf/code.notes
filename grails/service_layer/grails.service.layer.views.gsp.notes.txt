Grails Service Classes
=========================================================

From the TekDays project...The Task feature list
========================================================
According to my feature list on the TekDays project, I need to 
be able to:
    *   add tasks
    *   remove tasks
    *   assign tasks
    *   have a default set of tasks

We have the same four scaffolded views for the Task domain that we
do for the TekEvent.  They were created when we ran the 
generate-all script.  So, we'll focus on providing a default
set of tasks for a new event.

The task list feature will enable users to keep track of the many
things that need to be done to put on a successful technical 
conference.  Taks will be assigned to volunteers,
but the list will be available to the whole team.  It is important to
keep an eye on those details, or they'll fall through the cracks.  According
to our customer, most of the users will not have experience organizing
an event of this magnitude.  The idea behind the dafault tasks, then
is to give them some ideas and a starting point.


Our customer has provided us with a set of default tasks.  Rather than listing
them here, we'll proactice the DRY princidple.  We will lis the default tasks
in the code that we write to create them.  Now we need to figure out
where to put that code.


Grails Service Classes
===================================================================
We're going to write a method that will create several Task instances and add
them to the tasks property of a newly created TekEvent.  We will define this method
in a :

    "service class"
    
A Grails service class is a Plain Old Groovy Object(POGO) located in directory:

    grails-app/services

A grails service class is a Plain old Groovy Object (POGO).  By following 
these conventions, the plain POGO will be endowed with magical powers

Service classes are an excellent way to keep extra code out of our controllers.
When we have application logic that doesn't fit well in any domain class -- for
example, logic that involves multiple domain classes....will be centralized...
this is what is known as a "seperation of concerns".  Leaner controllers are easier
to maintain.


Creating a service class
=======================================================================
cmd:
> grails create-service com.tekdays.Task

result:

        package com.tekdays
        import grails.transaction.Transactional
        @Transactional
        class TaskService {
            def serviceMethod() {
            }
        }

We start with a stubbed-out method called serviceMethod, which by
default will be executed in a transaction.  This is because, by
default, any method declared in a service class in Grails
will be exectued within a transaction.


We don't have to do anything to enable transactions; everything is handled behind
the scenes by Spring and Hibernate.  If you've ever had to handle
transaction handling in a web application, we'll give
you a moment to get yoru jaw off the floor.



Let's add a method to our new TaskService called :

    addDefaultTasks(tekEvent)
    
Open tekDays grails-app/services/com/tekdays/TaskService.groovy and
add the following code...:


/******** TaskService.groovy iteration #1  START ********/

def addDefaultTasks(tekEvent){
    if(tekEvent.tasks?.size() > 0){
        return //we only want to add tasks to a new event
    }
    tekEvent.addToTasks(new Task(title:'Identify potential venues'))
    tekEvent.addToTasks(new Task(title:'Compile potential sponsor list'))
    tekEvent.addToTasks(new Task(title:'Design promotional materials'))
    tekEvent.addToTasks(new Task(title:'Compile potential advertising avenues'))
    tekEvent.addToTasks(new Task(title:'Locate swag provider'))
    tekEvent.save()
}
/******** TaskService.groovy iteration #1  STOP ********/

Putting TaskService into use.....
========================================================================
That's it for our service calss, but now we need to use it.  The logical
place to do that would be in the our action:


    TekEventController.save()
    
...this way, we can be sure the the default tasks will be 
added to every TekEvent that is successfully saved.
Let's open up our TekEventController 

/****************Edited Code Start*****************/
/**
    All we have to do is declare a property named after
    the service with the first letter being lower case
    and GRAILS will inject an instance of that class
    into our controller at runtime... in other works,
    we do not need to worry about ensuring that it exists before
    we call it.  It's all managed for us by Grails,
    courtesy of "convention over configuration."
    
    Now, in the save action, we'll add the call to addDefaultTasks
    
*/
package com.tekdays
import static org.springframework.http.HttpStatus.*
import grails.transaction.Transactional
@Transactional(readOnly = true)
class TekEventControler{
    def taskService 
    static allowedMethods = [save:"POST",update:"PUT",delete:"DELETE"]
    def index(Integer max){
        params.max = Math.min(max?:10,100)
        respond(TekEvent.list(params),model:[tekEventInstanceCount:TekEvent.count()])
    }
    def save(TekEvent tekEventInstance){
        if(tekEventInstance == null){
            notFound()
            return
        }
        if(tekEventInstance.hasError()){
            respond(tekEventInstance.errors, view:'create')
            return
        }
        tekEventInstance.save(flush:true)
        tekService.addDefaultTasks(tekEventInstance)
        request.withFormat{
            form{
                flash.message = message(code:'default.created.message',
                                        args:[message(code:'tekEventInstance.label',
                                             default:'TekEvent'), tekEventInstance.id])
                redirect tekEventInstance
            }
            '*' {respond tekEventInstance,[status:CREATED]}
        }
    }

}
/****************Edited Code Stop*****************/




Now that we have rapped that up...let's make our edits for 
the show.gsp for our tasks if they 
====================================================================
<g:if test="${tekEventInstance?.tasks}"
    <li class="fieldContain">
    <span id="tasks-label" class="property-label">
        <g:message code="tekEvent.tasks.label" default="Tasks"/>
    </span>
    <g:each in="${tekEventInstance.tasks}" var="t">
        <span class="property-value" aria-labelledby="tasks-label">
        <g:link controller="task" action="show" id="${t.id}">${t.title}
        </g:link></span>
     </li>
    </g:if>
