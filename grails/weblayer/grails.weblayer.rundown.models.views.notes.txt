http://docs.grails.org/2.3.11/guide/theWebLayer.html#GSPBasics



Models and Views
===================================================================
A model is a Map that the view uses when rendering.  The keys within
that Map correspond to variable names accessble by the view.
There are a couple of ways to return a model:


/****Code Example of passing a model map directly

    A model is a Map that the view uses when rendering.  The keys within
    that Map correspond to variable names accessble
    by the view.  There are a couple of ways to retrun a model....
*****/


class BookController{
    def show(){
        return ([books:Book.get(params.id)])
    }
    def list(){
        return ([books:Book.list()])
    }
}


/****A more advanced approach.....

   A more advanced approach is to return an instance of the 
   Spring ModelAndView class.....
   
*****/

import org.springframework.web.servlet.ModelAndView

class BookController{
   def index(){
    //get some books just for the index page, perhaps your favorites
    def favoriteBooks = Books.list()
    //forward to th elist view to show them
    return new ModelAndView("/book/list",[bookList:favoriteBooks])
   }
}



Note:  What we cannot use certain variables in our models
-------------------------------------------------------------------
One thing to bear in mind is that certain variable names
can not be used in your model:

    *   attributes
    *   application
    

Selecting the View
====================================================================
In both of the previous two examples, there was no code that
specified which view to render.  So how do we go about doing so ?

    *   Via convention...grails will either look for or generate a view
        with the same name as your action with a path that looks like:
        
       /**Example :
          The show() action below would map to(return in response to client)
          to this URL path:
          grails-app/views/book/show.gsp
       **/
       
       class Book{
        show(){
            ....
            [book:Book.get(params.id)]
        }
       }   
          
          
    * Via explicity specifying a view
       /**Example :
          To render custom or different views....
          The show() action below would map to(return in response to client)
          to this URL path:
          grails-app/views/book/display.gsp
       **/
       
       class Book{
        show(){
            ....
            (view:"display",[book:Book.get(params.id)])
        }
       }   

    * Via explicity specifying a view
       /**Example :
          To render custom or different views that reside outside of the default path of
          grails-app/views then.....
    
       **/
       
       class Book{
        show(){
            ....
            (view:"shared/display",[book:Book.get(params.id)])
        }
       } 


====================================================================

Rendering a Response.....

====================================================================
Sometimes it's easier (for example with Ajax applications)
to render snippets of text or code to the
response directly from the controller:

    render( "Hello World" )    
    
    
    
....other examples include:


// write up some markup

    render{
        for(b in books){
            div(id:b.id ,b.title)
        }
    }



Rendering a specific view
-------------------------------------------
render(view: 'show')

Rednering a template  for each item in a collection
-------------------------------------------------------------
render(template: 'book_template', colleciton: Book.list())


Rendering some text with encoding and content type
---------------------------------------------------------------
render(text:"<xml>some xml</xml>", contentType:"text/xml", encoding:"UTF-8")




There is also a MarkupBuilder in Grails
==================================================================

import groovy.xml.MarkupBuilder
…
def login() {
    def writer = new StringWriter()
    def builder = new MarkupBuilder(writer)
    builder.html {
        head {
            title 'Log in'
        }
        body {
            h1 'Hello'
            form {
            }
        }
    }
    def html = writer.toString()
    render html
}


def login() {
    // …
    body {
        h1 'Hello'
        builder.form {
        }
    }
    // …
}


