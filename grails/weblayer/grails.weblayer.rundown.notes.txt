http://docs.grails.org/2.3.11/guide/theWebLayer.html#GSPBasics



Specifying the enviroment in which your app is running
===================================================================
> grails dev run-app
> grails test run-app 
> grails prod run-app 



The Web Layer rundown

====================================================================

Controllers

====================================================================
Controllers handles requests and creates or prepares responses.
A controller can generate the response directlly or delegate to a view.
The default url maping configuration ensures that the first part of 
your contrller name is mapped to a to a URI and each action defined within
your controller maps to URIs within the controller name URI.

cmd
------------------------------------------------------------------------
> grails create-controller
    -or-
> grails gernerate-controller

Example
------------------------------------------------------------------------
> grails create-controller com.lab.book

/**resultant code **/
package com.demo

class BookController {

    def index() { }
    def
}

Controller actions

====================================================================
A controller can have as many multiple public action methods;
each one maps to a URI

cmd
------------------------------------------------------------------------
> grails create-controller
    -or-
> grails gernerate-controller

Example
------------------------------------------------------------------------
> grails create-controller com.lab.book

/**resultant code **/
package com.demo

class BookController {

    def index() { }
    def list(){
        //do controller logic
        //create model
        return model
    }
}


Note: Leveraging Public Methods as Actions
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
In earlier versions of GRAILS actions were implemented with
Closures.  This is still supported, but the preferred approach
is to use methods.

Levering methods instead of Closures properties has some
advantages:

    *   Efficient use of Memory
    *   Allow use of stateless controllers(singleton scope)
    *   Actions may be overrided in derivative classes
    *   Methods can be intercepted with standard proxying methods...
        which is possible with closures...but it isn't easy
        

Note: Leveraging Public Methods as Actions
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
In earlier versions of GRAILS actions were implemented with
Closures.  This is still supported, but the preferred approach
is to use methods.

Levering methods instead of Closures properties has some
advantages:

    *   Efficient use of Memory
    *   Allow use of stateless controllers(singleton scope)
    *   Actions may be overrided in derivative classes
    *   Methods can be intercepted with standard proxying methods...
        which is possible with closures...but it isn't easy
        
Note: All contorllers in grails have a default action
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
A controller has the concept of a default URI that maps to the root
URI of the controller, for example:

    /book ---->  BookController
    
These are the rules:
    *   if there is only one action, it's the default
    *   if you have an action named index, it's the default
    *   Alternatively, you can set it explicity within the 
        controller using the inherited property:
        
        static defaultAction = "list"
        

Controllers and Scopes
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
The available scopes are:

    *   serveletContext
    *   flash
    *   appContext
    *   request
    *   session
    *   params
    *   flash

Accessing Scopes
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Scopes can be accessed using the variable names above in
combination with Groovy's array index operator, even on
classes provided by the servlet API such as HttpServletRequest


/*********example code*********/

class BookController{

    def find(){
        def findBy = params["findBy"]
        def appContext = request["foo"]
        def loggedUser = session["logged_user"]
    }
}
/************---OR-----************/
class BookController{

    def find(){
        def findBy = params["findBy"]
        def appContext = request["foo"]
        def loggedUser = session["logged_user"]
    }
}

Using the Flash Scope
----------------------------------------------------------------------
    *   is often rferred to as a scope.  It's more accurate to rfere to it as a 
    Map that exits in a speical scope.  Vaues stored in flash are avaible
    for this reueat an one follwoin request, which allows us to store a message
    before redireing and have that message be availeble to the redirecte view. 
    
    /****************Example Use of the flash scope in a controller*************/
    
    class BookController{

    def findBookAuthor(){
       def book = Book.findByAuthor("David Setlzer")
       if
       if(!book){
            flash.messge = "....sorry...we could not find this author..."
            redirect(action:error)
       }
    }
}

Scoped Controllers
----------------------------------------------------------------------
Supported controller scopes are: 
    *   prototype(default) -- A new contorller is created for each request
    *   session -- One controller is created for the scope of the user session
    *   singleton   -- Only one instance of the controller ever exists(recommened for actions as methods)
    
/**Example of specifying scope of controller in your controller's code**/

class BookController{
    static scope = "session"
    def findBookAuthor(){
       def book = Book.findByAuthor("David Setlzer")
       if
       if(!book){
            flash.messge = "....sorry...we could not find this author..."
            redirect(action:error)
       }
    }
}

list:
----------------------------------------------------------------------
    *   list is one of the dynamic methods added to our domain classes
    
 flush:true
----------------------------------------------------------------------
    *   Adding flush:true to any persistence-related call will force Hibernate to
        pass the change on to the data source.  It's not usually necearry but good to 
        know about it when you need it.
        
 flush:true
----------------------------------------------------------------------
    *   Adding flush:true to any persistence-related call will force Hibernate to
        pass the change on to the data source.  It's not usually necearry but good to 
        know about it when you need it.
   

Using the Flash Scope
----------------------------------------------------------------------
    *   is often rferred to as a scope.  It's more accurate to rfere to it as a 
    Map that exits in a speical scope.  Vaues stored in flash are avaible
    for this reueat an one follwoin request, which allows us to store a message
    before redireing and have that message be availeble to the redirecte view.   



Example
---------------------------------------------------------------------
dataSource{
    pooled = true
    driverClassName = "org.h2.Driver"
    username = "sa"
    password = ""
}
hibernate{
    cache.user_second_level_cache = true
    cache.use_query_cache = false
    cache.region.factory_class = 'net.sf.ehcache.hibernate.EhCacheRegionFactory'
    //Hibernate 3
    //cache.region.factory_class = 
    //'org.hibernate.cache.ehcache.EhCacheRegionFactory'
    //Hibernate 4
}
.......



^^^^This is just an example useing Hibernate specific code.....
but we can use whatever we like 



Grails 3.x DataSource
http://docs.grails.org/3.0.17/guide/conf.html#dataSource
===================================================================
Since Grails is built on Java technology setting up a dta source
requires some knowledge of JDBC(the technology that doesn't stand for Java
Database Connectivity)

If we plan on using a database other than H2 you need a JDBC driver.
For example for MySQL you would need Connector/J
Divers typically come in the form of a JAR archive.  It's best to 
use the dependency resolution to resolve the jar if it's
available in a Maven repository, for example you could add
a dependency for the MySQL driver like this:

dependencies{
    runtime 'mysql:mysql-connector-java:5.1.29'
}


Barring access to dependency resolution then just put the JAR in
your project's lib directory.





Enviroment specific settings
===================================================================

enviroments{
    development{
        dataSource{
        dbCreate = "create-drop"
                   'create','create-drop','validate',''
        url = "jdbc:h2:prodDb;MVCC=TRUE;LOCK_TIMEOUT=10000"
    }
    test{
        dataSource{
        dbCreate = "update"
        url = "jdbc:h2:prodDb;MVCC=TRUE;LOCK_TIMEOUT=10000"
    }
    production{
        dataSource{
            dbCreate = "update"
            url = "jdbc:h2:prodDb;MVCC=TRUE;LOCK_TIMEOUT=10000"
            properties{
                maxActive = -1
                minEvictableIdleTimeMillis=1800000
                timeBetweenEvictionRunsMillis=1800000
                numTestsPerEvictionRun = 3
                testonBorrow = true
                testWhileIdle = true
                testOnReturn = false
                validationQuery = "SELECT 1"
                jdbcInterceptors="ConnectionState"
            }
        }
    }    
}


method: render()
====================================================================
To render different forms of responses from simple text responses,
to view and templates.


Description
--------------------------------------------------------------------
A multi-purpose method for rendering responses to the client which is best
illustrated with a few examples!!
Warning:  this method does not always support multiple parameters.
For example, if you specifify both collection and model, the
model paramter will be ignored
http://docs.grails.org/2.3.4/ref/Controllers/render.html

Render explicity defines the format you wish to return your data in:

(Examples from documentation):

render Book.list(params) as JSON
render Book.get(params.id) as XML

//render with status code
render(status:503,text:'Failed to update book ${b.id}')

Parameters:
----------------------------------------------------
    *   text(optional) - text to render
    *   builder(optional) - the builder to use when rendering markup
    *   view(optional)  - the view to delegate the rendering to
    *   template(optional) - the template to render.  Atemplate is usally an
                             HTML snippet and the file starts with an
                             underscore("_").  This isused in mostly in 
                             AJAX requests.
    *   layout(optional)   - the layout to use for the response
    *   var(optional)      - The name of the variable to be passed into the
                             template, defaults to the Groovy default
                             argument(it) if not specified
    *   bean (optional) - The bean to use in rendering
    *   model (optional) - The model to use in rendering
    *   collection (optional) - For rendering a template against each item in a collection
    *   contentType (optional) - The contentType of the response
    *   encoding (optional) - The encoding of the response
    *   converter (as single non-named first parameter) - A Converter that should be rendered as Response
    *   plugin (optional) - The plugin to look for the template in
    *   status (optional) - The HTTP status code to use
    *   file (optional) - The byte, java.io.File, or inputStream you wish to send with the response
    *   fileName (optional) - For specifying an attachment file name while rendering a file.
Examples
--------------------------------------------------------------------
class thisController{
        // renders text to response
    render "some text"
    // renders text for a specified content-type/encoding
    render(text: "<xml>some xml</xml>", contentType: "text/xml", encoding: "UTF-8")

    // render a template to the response for the specified model
    def theShining = new Book(title: 'The Shining', author: 'Stephen King')
    render(template: "book", model: [book: theShining])

    // render each item in the collection using the specified template
    render(template: "book", collection: [b1, b2, b3])

    // render a template to the response for the specified bean
    def theShining = new Book(title: 'The Shining', author: 'Stephen King')
    render(template: "book", bean: theShining)

    // render the view with the specified model
    def theShining = new Book(title: 'The Shining', author: 'Stephen King')
    render(view: "viewName", model: [book: theShining])

    // render the view with the controller as the model
    render(view: "viewName")

    // render some markup to the response
    render {
        div(id: "myDiv", "some text inside the div")
    }

    // render some XML markup to the response
    render(contentType: "text/xml") {
        books {
             for (b in books) {
                 book(title: b.title, author: b.author)
             }
        }
    }

    // render a JSON ( http://www.json.org ) response with the builder attribute:
    render(contentType: "application/json") {
        book(title: b.title, author: b.author)
    }

    // render with status code
    render(status: 503, text: 'Failed to update book ${b.id}')

    // Automatic marshalling of XML and JSON
    import grails.converters.*
    …
    render Book.list(params) as JSON
    render Book.get(params.id) as XML

    // render a file
    render(file: new File(absolutePath), fileName: "book.pdf")
}

method: respond()
====================================================================
Attempts to return the most appropiate type for the requested content
type (specififed by either the Accept header or file extension)

The view to be rendered below according to this HTTP Request Header:
--------------------------------------------------------------------
Accept: text/html, application/xhtml+xml, application/xml;q=0.9 */*;q=0.8, application/json


Description
--------------------------------------------------------------------
The respond method uses Content Negotiation to respond with
the most apporpiate content type.  See the documentation
on REST support :
http://docs.grails.org/3.1.1/guide/single.html#REST

Also.....this way the consumer of your site can choose how they wish to be
returned data.  This may not be the best option if you want to force
a specific return type.  

For example: You are building a REST api and only want to return json or xml,
if the user asks for test.html then they may be returned your data in a format
that ou do not wisht to support.  Otherwise respond can be an easy way to supppport
multiple return formats witout programming them separately:

Parameters:
----------------------------------------------------
    *   object - the object to render
    *   arguments - A map of arguments:
        -   Supported objects:
                +   view - A map of agruments
                +   model - The model to use in case of HTML rendering

Examples
--------------------------------------------------------------------

class thisController{
    //pick the best content-type to respond with
    def method_1(){
        respond(Book.get(1))
    }
    //pick the best content type to respond with from the 
    //given formats
    def method_2(){
        respond(Book.get(1),[formats:['xml','json']]) // return
    }
    def create(){
        respond(new SomeObject(params))
    }
    def show(){
        respond(Book) // return html rendenering
    }
}




Note:  On BootStrap and chosing 


