Description
===================================
TekDays.com is going to be a site where peiple can announce, plan, and promote
local, grassroots technical conferences.  It will all stat when visionary individuals
suggest an event in their city.  Then, as others hear about it and register their
interest and/or support, we'll provide tools to help them organize the event: a to-do list,
an organizer's dashborad(to keep track of volunterrs, sponsrs, andpotential attendees),
a discussion forum, and,  fianlly, an event home page to help with promotion.  This may
sound like a tall order, but Grails can make it happen.

Application Requirements
===================================
1. Create new events
2. Display event details
3. Edit event details
4. Create users/organizers
5. Allow users to volunteer to help
6. Add users to events
7. Allow anonymous users to register interest
8. Allow anonymous users to register interest
9. Create sponsors
10. Add Sponsors to events
11.	Have default list of tasks
12.	Add/remove tasks
13.	Assign tasks to users
14.	Post forum message
15.	Reply to forum message
16.	Display forum message threads
17.	Allow access to event home page with simple URL




Iteration Zero
=================================
Grails enviroments
--------------------
*	development(default):
	-	auto-reloading
	-	in memory db
	-
*	test
	- ?
	- ?
*	production
	- ?
	- ?

Grails project/app anatomy
----------------------------
	*	grails-app: root app directory
		-	conf :contains configuration files/dirs 
				  for optional  Hibernate and Spring config files
		-	controllers: Controller classes, the entry points for our app
		-	domain:	Holds domain classes, our presistant data
		-	il8n: Message propery files for internationalization
		-	migrations:	Can contain change log files generated by Grails DB Migration plugin
		-	services:	Location of service classes, which are Spring managed beans
		-	taglib:	Holds Groovy Server Pages(GSP) custom tag libraries
		-	utils: Holds codec classes
		-	utils:	Holds the GSP views
	*	lib:	Contains external libs...just as .jar files(such as JDBC drivers)
	*	scripts:	Can contain custom Groovy scripts to custom Groovy scripts
	*	src:	Contains directories for other Java and Groovy src files
	*	target:	Created when we first run the app.  It contains artifacts produced
				by Grails commands such as --> grails war
	*	test:	Contains directories for unit and integration tests
	*	web-app:	Contains directories for images, CSS, and JavaScript
	*	wrapper:	Contain wrapper files generated by the wrapper script
	*	application.properites :	a file that holds :
			-	app name
			-	app version
	*	grailsw.bat : allows our project to run without a manual install of Grials
					  Grails will be downloaded and set up
	*	grailsw	: allows our project to run without a manual install of Grials
					  Grails will be downloaded and set up


TekEvent
=============================

---------------------------------
| TekEvent                       |
---------------------------------
|
|	String city
|	String name
|	TekUser user
|	String venue
|	Date startDate
|	Date endDate
|	String description
|	
-----------------------------------


As we get further in developing our application, we'll 
see that we can call methods like :

	*	TekEvent.save()
	*	TekEvent.list() 
	*	TekEvent.findAllByStartDateGreaterThan(new Date() - 30)

...even though we've never written any code to implement those methods.
Along with dynamically adding several methods and nonpresistent properties to
our doamin classes, Grails adds two persistent properties:

	*	id :Integer  --> unique table id auto-generated by GRAILS
	*	version :Integer --> for optimistic concurrency



